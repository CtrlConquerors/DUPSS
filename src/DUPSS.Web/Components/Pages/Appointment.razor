@page "/Appointment"
@using DUPSS.API.Models.DTOs
@using DUPSS.Web.Components.Service
@inject HttpClient Http
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JS
@inject UserApiService UserService
@inject AppointmentApiService AppointmentService
@inject EmailService EmailService
<AuthorizeView Roles="AD,ST,MA,ME">
    <Authorized>
<h3>My appointment</h3>

@if (nextAppointment != null)
{
    <div class="alert alert-info mb-4">
        <strong>📌 Your next appointment:</strong><br />
        With <strong>@nextAppointment.Consultant?.Username</strong> on
        <strong>
            @nextAppointment.AppointmentDate.ToLocalTime().ToString("dd/MM/yyyy HH:mm")
            -
            @nextAppointment.AppointmentDate.ToLocalTime().AddMinutes(40).ToString("HH:mm")
        </strong><br />

        <em>Topic:</em> @nextAppointment.Topic <br />
        <em>Status:</em> @nextAppointment.Status
    </div>
}


<div class="appointment-link">
    <NavLink class="appointment-link" href="/BookAppointment" Match="NavLinkMatch.All">Booking appointment</NavLink>
</div>

@if (appointments == null)
{
    <p>Loading appointment...</p>
}
else if (!appointments.Any())
{
    <p>No appointments available at the moment.</p>
}
else
{
    <div class="mb-4">
        <div class="row g-3 align-items-center">
            <div class="col-auto">
                <input class="form-control" @bind="searchKeyword" placeholder="Find by Consultant..." />
            </div>
            <div class="col-auto">
                <input type="date" class="form-control" @bind="fromDate" />
            </div>
            <div class="col-auto">
                <input type="date" class="form-control" @bind="toDate" />
            </div>
            <div class="col-auto">
                <select class="form-select" @bind="selectedStatus">
                    <option value="">-- Status --</option>
                    <option>Pending</option>
                    <option>Accepted</option>
                    <option>Declined</option>
                    <option>Finished</option>
                    <option>Cancel</option>
                    <option>Missed</option>
                    <option>Expired</option>
                </select>
            </div>
            <div class="col-auto">
                <button class="btn btn-primary" @onclick="ApplyFilter">Filter</button>
                <button class="btn btn-secondary" @onclick="ResetFilter">Reset</button>
            </div>
        </div>
    </div>

    <table class="appointment-table">
        <thead>
            <tr>

                <th>Date</th>
                <th>Consultant</th>
                <th>Status</th>
                <th>Note</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var appt in filteredAppointments
          .OrderByDescending(a => a.Status == "Pending" || a.Status == "Accepted")
          .ThenBy(a => a.AppointmentDate))
            {
                <tr>

                    <td>
                        @{
                            var start = appt.AppointmentDate.ToLocalTime();
                            var end = start.AddMinutes(40); 
                        }
                        @start.ToString("dd/MM/yyyy HH:mm") - @end.ToString("HH:mm")
                    </td>

                    <td>@appt.Consultant?.Username</td>
                    <td>@appt.Status</td>
                    <td>
                        <strong>Notes from consultant:</strong><br />
                        @appt.Notes
                    </td>
                    <td>
                        @if (appt.Status == "Pending" || appt.Status == "Accepted")
                        {
                            var hoursBefore = (appt.AppointmentDate - DateTime.UtcNow).TotalHours;
                            if (hoursBefore >= 4)
                            {
                                @* <button class="btn btn-warning" @onclick="() => StartReschedule(appt)">✏️ Reschedule</button> *@
                                <button class="btn btn-danger btn-sm" @onclick="@(() => UpdateStatus(appt.AppointmentId, "Cancel"))"> ❌ Cancel</button>
                            }
                            else
                            {
                                <span class="text-muted">Too close to appointment time. Cannot cancel this appointment.</span>
                            }
                        }

                        else if (appt.Status == "Accepted")
                        {
                            <span class="text-muted">This Appointment has been Accepted</span>
                            <button class="btn btn-danger btn-sm" @onclick="@(() => UpdateStatus(appt.AppointmentId, "Cancel"))"> ❌ Cancel</button>
                        }
                        else if (appt.Status == "Cancel")
                        {
                            <span class="text-muted">This Appointment has been cancelled</span>
                        }
                        else if (appt.Status == "Declined")
                        {
                            <span class="text-muted">This Appointment has been Declined by the Consultant. For more information, check the note from consultant</span>
                        }
                        else if (appt.Status == "Missed")
                        {
                            <span class="text-muted">This Appointment has been Missed by the Consultant. For more information, check the note from consultant</span>
                        }
                        else if (appt.Status == "Expired")
                        {
                                    <span class="text-muted">This Appointment has been Expired</span>
                        }
                        else
                        {
                            <span class="text-muted">This Appointment has been finished</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @* @if (reschedulingAppointment != null) *@
    @* { *@
    @*     <div class="modal-backdrop fade show" style="z-index: 1040;"></div> *@

    @*     <div class="modal" *@
    @*     style="z-index: 1050; display: block; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);"> *@
    @*         <div class="modal-dialog"> *@
    @*             <div class="modal-content"> *@
    @*                 <div class="modal-header"> *@
    @*                     <h5 class="modal-title">Reschedule Appointment</h5> *@
    @*                     <button type="button" class="btn-close" @onclick="CancelReschedule"></button> *@
    @*                 </div> *@
    @*                 <div class="modal-body"> *@
    @*                     @if (allAvailableSlots.Any()) *@
    @*                     { *@
    @*                         <div class="mb-3"> *@
    @*                             <label>Choose date:</label> *@
    @*                             <select class="form-select" value="@selectedDateString" @onchange="OnDateChanged"> *@
    @*                                 <option value="">-- Choose date --</option> *@
    @*                                 @foreach (var day in allAvailableSlots.Select(s => s.Date).Distinct()) *@
    @*                                 { *@
    @*                                     <option value="@day.ToString("yyyy-MM-dd")">@day.ToString("dddd, dd/MM/yyyy")</option> *@
    @*                                 } *@
    @*                             </select> *@
    @*                         </div> *@

    @*                         @if (availableSlotsInDay.Any()) *@
    @*                         { *@
    @*                             <div class="mb-3"> *@
    @*                                 <label>Choose time slot:</label> *@
    @*                                 <select class="form-select" @bind="selectedSlotString"> *@
    @*                                     <option value="">-- Choose a slot --</option> *@
    @*                                     @foreach (var slot in availableSlotsInDay) *@
    @*                                     { *@
    @*                                         <option value="@slot.ToString("o")"> *@
    @*                                             @slot.ToLocalTime().ToString("HH:mm") - @slot.AddMinutes(40).ToLocalTime().ToString("HH:mm") *@
    @*                                         </option> *@
    @*                                     } *@
    @*                                 </select> *@
    @*                             </div> *@
    @*                         } *@
    @*                         else if (!string.IsNullOrEmpty(selectedDateString)) *@
    @*                         { *@
    @*                             <p class="text-danger">No available slots on selected day.</p> *@
    @*                         } *@
    @*                     } *@
    @*                     else *@
    @*                     { *@
    @*                         <p class="text-danger">No available slots found. Please try again later.</p> *@
    @*                     } *@
    @*                 </div> *@
    @*                 <div class="modal-footer"> *@
    @*                     <button class="btn btn-secondary" @onclick="CancelReschedule">Cancel</button> *@
    @*                     <button class="btn btn-primary" *@
    @*                     @onclick="ConfirmReschedule" *@
    @*                     disabled="@(string.IsNullOrEmpty(selectedSlotString))">Confirm</button> *@
    @*                 </div> *@
    @*             </div> *@
    @*         </div> *@
    @*     </div> *@
    @* } *@


}
    </Authorized>
    <NotAuthorized>
        <div class="access-denied">
            <h2>Access Denied</h2>
            <p>
                You do not have permission to access this page. Please <a href="/login">log in</a> with an authorized
                account.
            </p>
        </div>
    </NotAuthorized>
</AuthorizeView>
@code {
    private List<AppointmentDTO>? appointments;
    private List<AppointmentDTO> filteredAppointments = new();
    private AppointmentDTO? nextAppointment;
    // private AppointmentDTO? reschedulingAppointment;

    private List<UserDTO>? consultants;

    private bool autoSelectConsultant = false;

    // Slot data
    private List<DateTime> allAvailableSlots = new();
    private List<DateTime> availableSlotsInDay = new();
    private string? selectedDateString;
    private string? selectedSlotString;

    private string searchKeyword = "";
    private DateTime? fromDate = null;
    private DateTime? toDate = null;
    private string selectedStatus = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(userId))
        {
            appointments = await AppointmentService.GetAppointmentsForMemberAsync(userId);
            filteredAppointments = appointments.ToList();

            nextAppointment = appointments
                .Where(a => a.AppointmentDate > DateTime.UtcNow && a.Status is "Pending" or "Accepted")
                .OrderBy(a => a.AppointmentDate)
                .FirstOrDefault();

            await AutoUpdateExpiredAppointments();

            consultants = await UserService.GetConsultantsAsync();
        }
        else
        {
            appointments = new List<AppointmentDTO>();
        }
    }

    private async Task AutoUpdateExpiredAppointments()
    {
        var now = DateTime.UtcNow;
        var appointmentDuration = TimeSpan.FromMinutes(40); // vẫn giữ nếu cần dùng chỗ khác
        var minAcceptLeadTime = TimeSpan.FromMinutes(30);

        foreach (var appt in appointments)
        {
            // Nếu quá 1 tiếng từ lúc bắt đầu mà vẫn là Accepted → Missed
            if (appt.Status == "Accepted" && appt.AppointmentDate + TimeSpan.FromHours(1) < now)
            {
                var success = await AppointmentService.UpdateAppointmentStatusAsync(appt.AppointmentId, "Missed");
                if (success)
                {
                    appt.Status = "Missed";
                }
            }

            // Nếu gần đến giờ hẹn mà vẫn chưa được Accept → Expired
            if (appt.Status == "Pending" && appt.AppointmentDate - now <= minAcceptLeadTime)
            {
                var success = await AppointmentService.UpdateAppointmentStatusAsync(appt.AppointmentId, "Expired");
                if (success)
                {
                    appt.Status = "Expired";
                }
            }
        }

        ApplyFilter();
    }



    private void ApplyFilter()
    {
        filteredAppointments = appointments
            .Where(a =>
                (string.IsNullOrEmpty(searchKeyword) || a.Consultant?.Username?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) == true) &&
                (!fromDate.HasValue || a.AppointmentDate.ToLocalTime().Date >= fromDate.Value.Date) &&
                (!toDate.HasValue || a.AppointmentDate.ToLocalTime().Date <= toDate.Value.Date) &&
                (string.IsNullOrEmpty(selectedStatus) || a.Status == selectedStatus)
            ).ToList();
    }

    private void ResetFilter()
    {
        searchKeyword = "";
        fromDate = null;
        toDate = null;
        selectedStatus = "";
        filteredAppointments = appointments.ToList();
    }

    private async Task UpdateStatus(string appointmentId, string newStatus)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure to mark this appointment as {newStatus}?");
        if (!confirmed) return;

        var success = await AppointmentService.UpdateAppointmentStatusAsync(appointmentId, newStatus);

        if (success)
        {
            var appt = appointments.FirstOrDefault(a => a.AppointmentId == appointmentId);
            if (appt != null) appt.Status = newStatus;
            ApplyFilter();
            await JS.InvokeVoidAsync("alert", $"Appointment marked as {newStatus}.");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Failed to update appointment status.");
        }
    }



    // private async void StartReschedule(AppointmentDTO appt)
    // {
    //     reschedulingAppointment = appt;
    //     autoSelectConsultant = false;
    //     selectedDateString = null;
    //     selectedSlotString = null;
    //     availableSlotsInDay.Clear();
    //     await GenerateAvailableSlots();
    // }

    // private void CancelReschedule()
    // {
    //     reschedulingAppointment = null;
    // }

    // private async Task ConfirmReschedule()
    // {
    //     if (reschedulingAppointment == null || string.IsNullOrEmpty(selectedSlotString))
    //         return;

    //     var newDateUtc = DateTime.Parse(selectedSlotString).ToUniversalTime();

    //     var consultantAppointments = await AppointmentService.GetAppointmentsForConsultantAsync(reschedulingAppointment.ConsultantId);

    //     bool slotTaken = consultantAppointments.Any(a =>
    //         a.AppointmentId != reschedulingAppointment.AppointmentId &&
    //         a.Status != "Cancel" &&
    //         newDateUtc < a.AppointmentDate.AddMinutes(40) &&
    //         a.AppointmentDate < newDateUtc.AddMinutes(40));

    //     if (slotTaken)
    //     {
    //         await JS.InvokeVoidAsync("alert", "Consultant already has an appointment at this time.");
    //         return;
    //     }

    //     var updated = await AppointmentService.RescheduleAppointmentAsync(reschedulingAppointment.AppointmentId, newDateUtc);

    //     if (updated)
    //     {
    //         await JS.InvokeVoidAsync("alert", "Reschedule successful!");
    //         reschedulingAppointment.AppointmentDate = newDateUtc;
    //         reschedulingAppointment = null;
    //         ApplyFilter();
    //     }
    //     else
    //     {
    //         await JS.InvokeVoidAsync("alert", "Reschedule failed.");
    //     }
    // }


    // private async Task GenerateAvailableSlots()
    // {
    //     allAvailableSlots.Clear();
    //     DateTime now = DateTime.Now;
    //     DateTime minTime = now.AddHours(12);
    //     DateTime endDate = now.Date.AddDays(7);

    //     TimeSpan slotDuration = TimeSpan.FromMinutes(40);
    //     TimeSpan slotStep = TimeSpan.FromMinutes(45);
    //     TimeSpan eveningStart = TimeSpan.FromHours(17.5);
    //     TimeSpan eveningEnd = TimeSpan.FromHours(21.5);
    //     TimeSpan morningStart = TimeSpan.FromHours(9);
    //     TimeSpan morningEnd = TimeSpan.FromHours(11.5);

    //     for (DateTime day = now.Date; day <= endDate; day = day.AddDays(1))
    //     {
    //         var dow = day.DayOfWeek;
    //         if (dow >= DayOfWeek.Monday && dow <= DayOfWeek.Friday)
    //             AddSlotsForPeriod(day, eveningStart, eveningEnd, slotDuration, slotStep, minTime);
    //         else
    //         {
    //             AddSlotsForPeriod(day, morningStart, morningEnd, slotDuration, slotStep, minTime);
    //             AddSlotsForPeriod(day, eveningStart, eveningEnd, slotDuration, slotStep, minTime);
    //         }
    //     }
    // }

    // private void AddSlotsForPeriod(DateTime day, TimeSpan start, TimeSpan end,
    //     TimeSpan duration, TimeSpan step, DateTime minTime)
    // {
    //     for (var t = start; t + duration <= end; t += step)
    //     {
    //         var slot = day.Add(t);
    //         if (slot > minTime)
    //             allAvailableSlots.Add(slot);
    //     }
    // }

    // private void OnDateChanged(ChangeEventArgs e)
    // {
    //     selectedDateString = e.Value?.ToString();
    //     if (!string.IsNullOrEmpty(selectedDateString))
    //     {
    //         var date = DateTime.Parse(selectedDateString);
    //         availableSlotsInDay = allAvailableSlots.Where(s => s.Date == date.Date).OrderBy(s => s).ToList();
    //     }
    //     else
    //     {
    //         availableSlotsInDay.Clear();
    //     }
    // }
}

