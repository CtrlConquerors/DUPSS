@page "/Assessment/Take/{AssessmentId}"
@using System.Security.Claims
@using DUPSS.API.Models.DTOs
@using DUPSS.Web.Components.Service
@inject AssessmentApiService AssessmentApiService
@inject AssessmentQuestionApiService QuestionApiService
@inject AssessmentAnswerApiService AnswerApiService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JS
<AuthorizeView Roles="AD,ST,MA,ME">
    <Authorized>
<div class="take-assessment-container">
    @if (isLoading)
    {
        <div class="loading-indicator">
            <div class="loading-content">
                <div class="spinner"></div>
                <p>Loading assessment...</p>
            </div>
        </div>
    }
    else if (hasError)
    {
        <div class="error-message">
            <div class="error-icon">⚠️</div>
            <h3>Unable to Load Assessment</h3>
            <p>@errorMessage</p>
            <div class="error-actions">
                <button class="retry-button" @onclick="RetryLoadAssessment">
                    <span class="button-icon">🔄</span>
                    Retry
                </button>
                <button class="back-button" @onclick="GoBackToAssessments">
                    <span class="button-icon">←</span>
                    Back to Assessments
                </button>
            </div>
        </div>
    }
    else if (assessment == null || !questions.Any())
    {
        <div class="no-content-message">
            <div class="no-content-icon">📋</div>
            <h3>Assessment Not Available</h3>
            <p>This assessment is currently not available or has no questions.</p>
            <button class="back-button" @onclick="GoBackToAssessments">
                <span class="button-icon">←</span>
                Back to Assessments
            </button>
        </div>
    }
    else if (showResults && assessmentResult != null)
    {
        <div class="results-container  @GetRiskMarginClass()">
            <div class="results-header">
                <div class="results-icon">✅</div>
                <h2>Assessment Complete</h2>
                <h3>@assessment.AssessmentType Results</h3>
            </div>

            <div class="results-content">
                <div class="score-section">
                    <div class="score-display">
                        <span class="score-label">Total Score</span>
                        <span class="score-value">@assessmentResult.TotalScore</span>
                    </div>
                </div>

                <div class="recommendation-section">
                    <h4>Recommendation</h4>
                    <div class="recommendation-text">
                        @assessmentResult.Recommendation
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(assessmentResult.ScoreDetails))
                {
                    <div class="details-section">
                        <h4>Score Details</h4>
                        <div class="score-details">
                            @foreach (var (detail, index) in assessmentResult.ScoreDetails.Split(';').Select((value, i) => (value, i)))
                            {
                                <div class="detail-item">@ProcessAndReturnDetail(detail, index)</div>
                            }
                        </div>
                    </div>
                }

                <div class="completion-info">
                    <p><strong>Completed on:</strong> @assessmentResult.CompletedOn?.ToString("MMMM dd, yyyy")</p>
                </div>
            </div>

            <div class="results-actions">
                <button class="primary-button" @onclick="TakeAnotherAssessment">
                   
                    Take Another Assessment
                </button>
                <button class="secondary-button" @onclick="GoBackToAssessments">
                    <i class="fas fa-arrow-left"></i>
                    Back to Assessments
                </button>
                
                @switch (riskLevel){
                            case 1:
                                <button class="primary-button" @onclick="GoToBlogs">
                                    <i class="fas fa-blog"></i>
                                    Go to Blogs
                                </button>
                            break;
                            case 2:
                                <button class="primary-button" @onclick="GoToBlogs">
                                    <i class="fas fa-blog"></i>
                                    Go to Blogs
                                </button>
                                <button class="primary-button" @onclick="GoToCourses">
                                    <i class="fas fa-book-open"></i>
                                    Go to Courses
                                </button>
                            break;
                            case 3:
                                <button class="primary-button" @onclick="GoToBlogs">
                                    <i class="fas fa-blog"></i>
                                    Go to Blogs
                                </button>
                                <button class="primary-button" @onclick="GoToCourses">
                                    <i class="fas fa-book-open"></i>
                                    Go to Courses
                                </button>
                                <button class="primary-button" @onclick="GoToAppointments">
                                    
                                    Go to Appointments
                                </button>
                            break;
                            default:
                            break;
                        }
            </div>
        </div>
    }
    else
    {
        <div class="assessment-header">
            <div class="assessment-info">
                <h1>@assessment.AssessmentType</h1>
                <p class="assessment-description">@assessment.Description</p>
                @if (AssessmentType == "ASSIST")
                {
                    <p class="substance-info">Current Section: @GetCurrentSubstance()</p>
                }
            </div>

            <div class="progress-container">
                <div class="progress-info">
                    <span class="progress-text">Question @(currentQuestionIndex + 1) of @questions.Count</span>
                    <span class="progress-percentage">@Math.Round(((double)(currentQuestionIndex + 1) / questions.Count) * 100, 0)%</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: @(((double)(currentQuestionIndex + 1) / questions.Count) * 100)%"></div>
                </div>
            </div>
        </div>

        <div class="question-container">
            <div class="question-card">
                <div class="question-header">
                    <h3>Question @(currentQuestionIndex + 1)</h3>
                </div>

                <div class="question-text">
                    @currentQuestion.Question
                </div>

                <div class="answers-container">
                    @switch (currentQuestion.QuestionType)
                    {
                        case "MultipleChoice":
                            @foreach (var answer in currentAnswers)
                            {
                                <div class="answer-option" @onclick="() => SelectSingleAnswer(answer.AnswerId)">
                                    <div class="answer-radio">
                                        <input type="radio"
                                               name="answer-@currentQuestion.QuestionId"
                                               value="@answer.AnswerId"
                                               checked="@(selectedAnswerIds.Contains(answer.AnswerId))"
                                               @onchange="() => SelectSingleAnswer(answer.AnswerId)"/>
                                        <span class="radio-checkmark @(selectedAnswerIds.Contains(answer.AnswerId) ? "selected" : "")"></span>
                                    </div>
                                    <div class="answer-content">
                                        <div class="answer-text">@answer.Answer</div>
                                        @if (!string.IsNullOrEmpty(answer.AnswerDetails))
                                        {
                                            <div class="answer-details">@answer.AnswerDetails</div>
                                        }
                                    </div>
                                </div>
                            }
                            break;
                        case "YesNo":
                            @foreach (var answer in currentAnswers)
                            {
                                <div class="answer-option" @onclick="() => SelectSingleAnswer(answer.AnswerId)">
                                    <div class="answer-radio">
                                        <input type="radio"
                                               name="answer-@currentQuestion.QuestionId"
                                               value="@answer.AnswerId"
                                               checked="@(selectedAnswerIds.Contains(answer.AnswerId))"
                                               @onchange="() => SelectSingleAnswer(answer.AnswerId)"/>
                                        <span class="radio-checkmark @(selectedAnswerIds.Contains(answer.AnswerId) ? "selected" : "")"></span>
                                    </div>
                                    <div class="answer-content">
                                        <div class="answer-text">@answer.Answer</div>
                                        @if (!string.IsNullOrEmpty(answer.AnswerDetails))
                                        {
                                            <div class="answer-details">@answer.AnswerDetails</div>
                                        }
                                    </div>
                                </div>
                            }
                            break;
                        case "Numeric":
                            @foreach (var answer in currentAnswers)
                            {
                                <div class="answer-option" @onclick="() => SelectSingleAnswer(answer.AnswerId)">
                                    <div class="answer-radio">
                                        <input type="radio"
                                               name="answer-@currentQuestion.QuestionId"
                                               value="@answer.AnswerId"
                                               checked="@(selectedAnswerIds.Contains(answer.AnswerId))"
                                               @onchange="() => SelectSingleAnswer(answer.AnswerId)"/>
                                        <span class="radio-checkmark @(selectedAnswerIds.Contains(answer.AnswerId) ? "selected" : "")"></span>
                                    </div>
                                    <div class="answer-content">
                                        <div class="answer-text">@answer.Answer</div>
                                    </div>
                                </div>
                            }
                            break;
                    }
                </div>

                <div class="question-actions">
                    <button class="secondary-button"
                            @onclick="PreviousQuestion"
                            disabled="@(currentQuestionIndex == 0)">
                        <i class="fas fa-arrow-left"></i>
                        Previous
                    </button>

                    @if (AssessmentType == "CRAFFT" && currentQuestion.QuestionId == $"{AssessmentId}_Q4" && IsCrafftQ1ToQ3AllZero())
                    {
                        <button class="submit-button"
                                @onclick="SubmitAssessment"
                                disabled="@(!IsAnswerSelected() || isSubmitting)">
                            @if (isSubmitting)
                            {
                                <span class="button-spinner"></span>
                                <span>Submitting...</span>
                            }
                            else
                            {
                                <span class="button-icon">✓</span>
                                <span>Submit Assessment</span>
                            }
                        </button>
                    }
                    else if (currentQuestionIndex < questions.Count - 1)
                    {
                        <button class="primary-button"
                                @onclick="NextQuestion"
                                disabled="@(currentQuestionIndex == 0 ? !IsFirstQuestionAnswered() : !IsAnswerSelected())">
                            Next
                            <i class="fas fa-arrow-right"></i>
                        </button>
                    }
                    else
                    {
                        <button class="submit-button"
                                @onclick="SubmitAssessment"
                                disabled="@(!IsAnswerSelected() || isSubmitting)">
                            @if (isSubmitting)
                            {
                                <span class="button-spinner"></span>
                                <span>Submitting...</span>
                            }
                            else
                            {
                                <span class="button-icon">✓</span>
                                <span>Submit Assessment</span>
                            }
                        </button>
                    }
                </div>
            </div>
        </div>

        <div class="assessment-footer">
            <button class="exit-button" @onclick="ConfirmExit">
                <i class="fas fa-sign-out-alt"></i>
                Exit Assessment
            </button>
        </div>
    }
</div>

@if (showExitConfirmation)
{
    <div class="modal-overlay" tabindex="-1" role="dialog" aria-modal="true" @onclick="CancelExit">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Exit Assessment?</h3>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to exit this assessment? Your progress will be lost.</p>
            </div>
            <div class="modal-actions">
                <button class="secondary-button" @onclick="CancelExit">Cancel</button>
                <button class="danger-button" @onclick="ExitAssessment">Exit</button>
            </div>
        </div>
    </div>
}
    </Authorized>
    <NotAuthorized>
        <div class="access-denied">
            <h2>Access Denied</h2>
            <p>
                You do not have permission to access this page. Please <a href="/login">log in</a> with an authorized
                account.
            </p>
        </div>
    </NotAuthorized>
</AuthorizeView>
@code {
    [Parameter]
    public string AssessmentId { get; set; } = string.Empty;

    private AssessmentDTO? assessment;
    private List<AssessmentQuestionDTO> questions = new();
    private Dictionary<string, List<AssessmentAnswerDTO>> questionAnswers = new();
    private Dictionary<string, string> userAnswers = new(); // QuestionId -> AnswerId
    private AssessmentResultDTO? assessmentResult;

    private bool isLoading = true;
    private bool hasError = false;
    private bool isSubmitting = false;
    private bool showResults = false;
    private bool showExitConfirmation = false;
    private int riskLevel = 0;
    private string errorMessage = string.Empty;
    private int currentQuestionIndex = 0;
    private List<string> selectedAnswerIds = new();
    private string? CurrentMemberId;
    private bool isFirstQuestionAnswered = false; // Track if first question is explicitly answered
    private string? AssessmentType => assessment?.AssessmentType;

    private AssessmentQuestionDTO currentQuestion => questions[currentQuestionIndex];
    private List<AssessmentAnswerDTO> currentAnswers => questionAnswers.GetValueOrDefault(currentQuestion.QuestionId, new List<AssessmentAnswerDTO>());

    private readonly List<string> substances = new()
    {
        "Tobacco", "Alcohol", "Cannabis", "Cocaine", "Amphetamines",
        "Inhalants", "Sedatives", "Hallucinogens", "Opioids", "Other"
    };

    private string GetCurrentSubstance()
    {
        if (AssessmentType != "ASSIST") return string.Empty;
        int substanceIndex = currentQuestionIndex / 8;
        return substanceIndex < substances.Count ? substances[substanceIndex] : string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAssessmentAsync();
    }

    private async Task LoadAssessmentAsync()
    {
        isLoading = true;
        hasError = false;
        errorMessage = string.Empty;

        try
        {
            Console.WriteLine($"Loading assessment with ID: {AssessmentId}");

            // Load assessment metadata
            assessment = await AssessmentApiService.GetByIdAsync(AssessmentId);
            if (assessment == null)
            {
                hasError = true;
                errorMessage = "Assessment not found.";
                return;
            }

            // Load questions and answers dynamically
            await LoadQuestionsAsync();

            if (!questions.Any())
            {
                hasError = true;
                errorMessage = "No questions defined for this assessment.";
                return;
            }

            // Initialize user answers without default "No" for Q1 to enforce explicit selection
            foreach (var question in questions)
            {
                userAnswers[question.QuestionId] = string.Empty;
            }

            LoadCurrentQuestionAnswers();
            Console.WriteLine($"Successfully loaded {assessment.AssessmentType} with {questions.Count} questions");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assessment: {ex.Message}");
            hasError = true;
            errorMessage = $"Failed to load assessment: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadQuestionsAsync()
    {
        try
        {
            // Fetch questions and sort by Sequence
            questions = (await QuestionApiService.GetAllAsync())
                .Where(q => q.AssessmentId == AssessmentId)
                .OrderBy(q => q.Sequence)
                .ToList();

            // Fetch answers for each question
            questionAnswers = new Dictionary<string, List<AssessmentAnswerDTO>>();
            var allAnswers = await AnswerApiService.GetAllAsync();
            foreach (var question in questions)
            {
                questionAnswers[question.QuestionId] = allAnswers
                    .Where(a => a.QuestionId == question.QuestionId)
                    .ToList();
            }

            Console.WriteLine($"Loaded {questions.Count} questions and {questionAnswers.Sum(kv => kv.Value.Count)} answers for AssessmentId: {AssessmentId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading questions/answers: {ex.Message}");
            hasError = true;
            errorMessage = $"Failed to load questions: {ex.Message}";
        }
    }

    private void LoadCurrentQuestionAnswers()
    {
        selectedAnswerIds = userAnswers.ContainsKey(currentQuestion.QuestionId) && !string.IsNullOrEmpty(userAnswers[currentQuestion.QuestionId])
            ? new List<string> { userAnswers[currentQuestion.QuestionId] }
            : new List<string>();
    }

    private void SelectSingleAnswer(string answerId)
    {
        selectedAnswerIds = new List<string> { answerId };
        userAnswers[currentQuestion.QuestionId] = answerId;

        // Track explicit answer for first question
        if (currentQuestionIndex == 0)
        {
            isFirstQuestionAnswered = true;
        }

        // If Q1 is "No", auto-set "No"/"Never" for Q2–Q8 of the same substance
        if (AssessmentType == "ASSIST" && currentQuestion.QuestionId.EndsWith("_Q1") && answerId.EndsWith("_NO"))
        {
            var substanceId = currentQuestion.QuestionId.Split('_')[1];
            for (int i = 2; i <= 7; i++)
            {
                userAnswers[$"{AssessmentId}_{substanceId}_Q{i}"] = $"{AssessmentId}_{substanceId}_Q{i}_NO";
            }
            userAnswers[$"{AssessmentId}_{substanceId}_Q8"] = $"{AssessmentId}_{substanceId}_Q8_NEVER";
        }

        StateHasChanged();
    }

    private bool IsCrafftQ1ToQ3AllZero()
    {
        return userAnswers.GetValueOrDefault($"{AssessmentId}_Q1", "").EndsWith("_0") &&
               userAnswers.GetValueOrDefault($"{AssessmentId}_Q2", "").EndsWith("_0") &&
               userAnswers.GetValueOrDefault($"{AssessmentId}_Q3", "").EndsWith("_0");
    }

    private bool IsAnswerSelected()
    {
        return userAnswers.ContainsKey(currentQuestion.QuestionId) && !string.IsNullOrEmpty(userAnswers[currentQuestion.QuestionId]);
    }

    private bool IsFirstQuestionAnswered()
    {
        return isFirstQuestionAnswered && IsAnswerSelected();
    }

    private void SaveCurrentAnswer()
    {
        userAnswers[currentQuestion.QuestionId] = selectedAnswerIds.FirstOrDefault() ?? string.Empty;
    }

    private async Task NextQuestion()
    {
        if (currentQuestionIndex >= questions.Count - 1 || (currentQuestionIndex == 0 ? !IsFirstQuestionAnswered() : !IsAnswerSelected()))
            return;
        SaveCurrentAnswer();

        switch (AssessmentType)
        {
            case "ASSIST" when currentQuestion.QuestionId.EndsWith("_Q1") && userAnswers[currentQuestion.QuestionId].EndsWith("_NO"):
                {
                    int substanceIndex = currentQuestionIndex / 8;
                    // Check if this is the last substance ("Other")
                    if (substanceIndex == substances.Count - 1)
                    {
                        Console.WriteLine("Last substance Q1 answered 'No', submitting assessment");
                        await SubmitAssessment();
                        return;
                    }
                    currentQuestionIndex = (substanceIndex + 1) * 8;
                    if (currentQuestionIndex >= questions.Count)
                    {
                        currentQuestionIndex = questions.Count - 1;
                    }
                    break;
                }
            case "CRAFFT" when currentQuestion.QuestionId == $"{AssessmentId}_Q4":
                {
                    bool allZero = userAnswers.GetValueOrDefault($"{AssessmentId}_Q1", "").EndsWith("_0") &&
                                  userAnswers.GetValueOrDefault($"{AssessmentId}_Q2", "").EndsWith("_0") &&
                                  userAnswers.GetValueOrDefault($"{AssessmentId}_Q3", "").EndsWith("_0");
                    if (allZero)
                    {
                        Console.WriteLine("CRAFFT Q1-Q3 all '0', submitting after Q4");
                        await SubmitAssessment();
                        return;
                    }
                    currentQuestionIndex++;
                    Console.WriteLine($"CRAFFT Q4 answered, Q1-Q3 not all '0', navigating to Q5, Index: {currentQuestionIndex}, QuestionId: {questions[currentQuestionIndex].QuestionId}");
                    break;
                }
            default:
                currentQuestionIndex++;
                break;
        }

        Console.WriteLine($"Navigating to QuestionId: {questions[currentQuestionIndex].QuestionId}, Index: {currentQuestionIndex}");
        LoadCurrentQuestionAnswers();
        StateHasChanged();
    }

    private void PreviousQuestion()
    {
        if (currentQuestionIndex <= 0)
            return;
        SaveCurrentAnswer();

        if (AssessmentType == "ASSIST" && currentQuestion.QuestionId.EndsWith("_Q1"))
        {
            int substanceIndex = currentQuestionIndex / 8;
            if (substanceIndex > 0)
            {
                var prevSubstanceIndex = substanceIndex - 1;
                var prevSubstanceQ1Id = $"{AssessmentId}_{substances[prevSubstanceIndex].ToUpper().Replace(" ", "_")}_Q1";
                var prevQ1Answer = userAnswers.GetValueOrDefault(prevSubstanceQ1Id, string.Empty);
                currentQuestionIndex = prevQ1Answer.EndsWith("_NO") ? prevSubstanceIndex * 8 : ((prevSubstanceIndex * 8) + 7);
            }
            else
            {
                currentQuestionIndex = 0;
            }
        }
        else
        {
            currentQuestionIndex--;
        }

        LoadCurrentQuestionAnswers();
        StateHasChanged();
    }

    private async Task SubmitAssessment()
    {
        if (!IsAnswerSelected() || isSubmitting)
            return;

        SaveCurrentAnswer();
        isSubmitting = true;
        StateHasChanged();

        try
        {
            if (string.IsNullOrEmpty(CurrentMemberId))
            {
                var authState = await AuthProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                if (user.Identity?.IsAuthenticated == true)
                {
                    CurrentMemberId = user.FindFirstValue(ClaimTypes.NameIdentifier);
                    Console.WriteLine($"Retrieved MemberId: {CurrentMemberId}");
                }

                if (string.IsNullOrEmpty(CurrentMemberId))
                {
                    Console.WriteLine("Failed to retrieve MemberId. Redirecting to login.");
                    await JS.InvokeVoidAsync("alert", "Failed to retrieve Member ID. Please login again.");
                    NavigationManager.NavigateTo("/login");
                    return;
                }
            }

            var scoreDetails = new List<string>();
            int totalScore = 0;
            string recommendation = string.Empty;
            bool hasHighRiskIndicator = false;

            switch (AssessmentType)
            {
                case "ASSIST":
                    var substanceScores = new Dictionary<string, int>();
                    foreach (var substance in substances)
                    {
                        var substanceId = substance.ToUpper().Replace(" ", "_");
                        if (userAnswers[$"{AssessmentId}_{substanceId}_Q1"] == $"{AssessmentId}_{substanceId}_Q1_NO")
                        {
                            substanceScores[substance] = 0;
                            scoreDetails.Add($"{substance}: No use reported");
                            continue;
                        }

                        int substanceScore = 0;
                        var substanceDetails = new List<string>();

                        for (int i = 2; i <= 8; i++)
                        {
                            var questionId = $"{AssessmentId}_{substanceId}_Q{i}";
                            if (!userAnswers.TryGetValue(questionId, out var answerId) || string.IsNullOrEmpty(answerId))
                                continue;
                            var answer = questionAnswers[questionId].FirstOrDefault(a => a.AnswerId == answerId);
                            if (answer == null)
                            {
                                Console.WriteLine($"Invalid AnswerId for {questionId}: {answerId}");
                                continue;
                            }
                            substanceScore += answer.ScoreValue;
                            substanceDetails.Add($"Q{i}:{answer.Answer}");
                            // Check for high-risk indicators (Q6, Q7 "Yes", or Q8 injection)
                            if ((i == 6 || i == 7) && answer.Answer == "Yes" || (i == 8 && answer.Answer != "Never"))
                            {
                                hasHighRiskIndicator = true;
                            }
                        }

                        substanceScores[substance] = substanceScore;
                        totalScore += substanceScore;
                        scoreDetails.Add($"{substance}: Score={substanceScore}; {string.Join(", ", substanceDetails)}");
                    }

                    // Unified recommendation for ASSIST
                    if (totalScore == 0)
                    {
                        recommendation = "No risk: No substance use reported. Continue maintaining a healthy lifestyle.";
                        riskLevel = 0;
                    }
                    else if (totalScore <= 10 && !hasHighRiskIndicator)
                    {
                        recommendation = "Low risk: Minimal substance use detected. Consider reading educational blogs for awareness.";
                        riskLevel = 1;
                    }
                    else if (totalScore <= 26 || substanceScores.Count(s => s.Value > 0) > 1)
                    {
                        recommendation = "Moderate risk: Some substance use detected. We recommend enrolling in educational courses and monitoring your usage.";
                        riskLevel = 2;
                    }
                    else
                    {
                        recommendation = "High risk: Significant substance use or high-risk behaviors detected. We strongly recommend enrolling in courses, reading blogs, and scheduling a professional consultation.";
                        riskLevel = 3;
                    }
                    Console.WriteLine($"ASSIST: TotalScore={totalScore}, HighRiskIndicator={hasHighRiskIndicator}, Recommendation={recommendation}");
                    break;

                case "CRAFFT":
                    Console.WriteLine($"CRAFFT Submission - Q1: {userAnswers.GetValueOrDefault($"{AssessmentId}_Q1", "None")}, Q2: {userAnswers.GetValueOrDefault($"{AssessmentId}_Q2", "None")}, Q3: {userAnswers.GetValueOrDefault($"{AssessmentId}_Q3", "None")}");
                    bool allZero = userAnswers.GetValueOrDefault($"{AssessmentId}_Q1", "").EndsWith("_0") &&
                                  userAnswers.GetValueOrDefault($"{AssessmentId}_Q2", "").EndsWith("_0") &&
                                  userAnswers.GetValueOrDefault($"{AssessmentId}_Q3", "").EndsWith("_0");

                    foreach (var question in questions)
                    {
                        if (!question.QuestionId.StartsWith($"{AssessmentId}_Q") || (allZero && question.QuestionId != $"{AssessmentId}_Q4"))
                            continue;
                        if (!userAnswers.TryGetValue(question.QuestionId, out var answerId) || string.IsNullOrEmpty(answerId))
                            continue;
                        var answer = questionAnswers[question.QuestionId].FirstOrDefault(a => a.AnswerId == answerId);
                        if (answer == null)
                        {
                            Console.WriteLine($"Invalid AnswerId for {question.QuestionId}: {answerId}");
                            continue;
                        }
                        totalScore += answer.ScoreValue;
                        scoreDetails.Add($"{question.QuestionId}: {answer.Answer}");
                        // Check for high-risk indicators (Q4 or Q9 "Yes")
                        if ((question.QuestionId == $"{AssessmentId}_Q4" || question.QuestionId == $"{AssessmentId}_Q9") && answer.Answer == "Yes")
                        {
                            hasHighRiskIndicator = true;
                        }
                    }

                    // Unified recommendation for CRAFFT
                    if (allZero && !hasHighRiskIndicator)
                    {
                        recommendation = "No risk: No substance use or high-risk behaviors reported. Continue maintaining a healthy lifestyle.";
                        riskLevel = 0;
                    }
                    else if (totalScore <= 1 && !hasHighRiskIndicator)
                    {
                        recommendation = "Low risk: Minimal risk behaviors detected. Consider reading educational blogs for awareness.";
                        riskLevel = 1;
                    }
                    else if (totalScore <= 3 || !hasHighRiskIndicator)
                    {
                        recommendation = "Moderate risk: Some risky behaviors detected. We recommend enrolling in educational courses and monitoring your behavior.";
                        riskLevel = 2;
                    }
                    else
                    {
                        recommendation = "High risk: Significant risky behaviors detected. We strongly recommend enrolling in courses, reading blogs, and scheduling a professional consultation.";
                        riskLevel = 3;
                    }
                    Console.WriteLine($"CRAFFT: TotalScore={totalScore}, HighRiskIndicator={hasHighRiskIndicator}, Recommendation={recommendation}");
                    break;
            }

            // Ensure assessmentResult is populated before submission
            assessmentResult = new AssessmentResultDTO
            {
                ResultId = Guid.NewGuid().ToString(),
                AssessmentId = AssessmentId,
                MemberId = CurrentMemberId,
                TotalScore = totalScore,
                ScoreDetails = string.Join(";", scoreDetails),
                Recommendation = recommendation,
                CompletedOn = DateOnly.FromDateTime(DateTime.Now)
            };

            // Validate required fields
            if (string.IsNullOrEmpty(assessmentResult.MemberId) || string.IsNullOrEmpty(assessmentResult.AssessmentId) || string.IsNullOrEmpty(assessmentResult.ResultId))
            {
                Console.WriteLine("Invalid submission: Missing required fields.");
                hasError = true;
                errorMessage = "Invalid submission details.";
                return;
            }

            Console.WriteLine($"Submission Payload: MemberId={assessmentResult.MemberId}, ResultId={assessmentResult.ResultId}, TotalScore={assessmentResult.TotalScore}, Recommendation={recommendation}");
            var result = await AssessmentApiService.SubmitAssessmentAsync(AssessmentId, assessmentResult);

            if (result != null)
            {
                showResults = true;
                Console.WriteLine($"Assessment submitted successfully. ResultId: {result.ResultId}");
            }
            else
            {
                hasError = true;
                errorMessage = "Failed to submit assessment. Please check your answers and try again.";
                Console.WriteLine("Submission failed. Check API response logs for details.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Submission Exception: {ex.Message}, StackTrace: {ex.StackTrace}");
            hasError = true;
            errorMessage = $"Failed to submit assessment: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task RetryLoadAssessment()
    {
        await LoadAssessmentAsync();
    }

    private string ProcessAndReturnDetail(string detail, int index)
    {
        var trimmedDetail = detail.Trim();
        if (!string.IsNullOrEmpty(trimmedDetail) && trimmedDetail.Contains(':'))
        {
            return trimmedDetail;
        }
        else
        {
            return $"Detail {index + 1}: {trimmedDetail}";
        }
    }

    private void ConfirmExit()
    {
        showExitConfirmation = true;
        StateHasChanged();
    }

    private void CancelExit()
    {
        showExitConfirmation = false;
        StateHasChanged();
    }

    private void ExitAssessment()
    {
        NavigationManager.NavigateTo("/Assessment", forceLoad: true);
    }

    private void GoBackToAssessments()
    {
        NavigationManager.NavigateTo("/Assessment", forceLoad: true);
    }

    private void TakeAnotherAssessment()
    {
        NavigationManager.NavigateTo("/Assessment", forceLoad: true);
    }
    private void GoToBlogs()
    {
        NavigationManager.NavigateTo("/Blog", forceLoad: true);
    }
    private void GoToCourses()
    {
        NavigationManager.NavigateTo("/Course", forceLoad: true);
    }
    private void GoToAppointments()
    {
        NavigationManager.NavigateTo("/Appointment", forceLoad: true);
    }
    private string GetRiskMarginClass()
{
    return riskLevel switch
    {
        1 => "results-low-risk",
        2 => "results-moderate-risk",
        3 => "results-high-risk",
        _ => "results-low-risk"
    };
}
}