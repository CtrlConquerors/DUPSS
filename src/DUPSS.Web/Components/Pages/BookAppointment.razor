@page "/BookAppointment"
@using DUPSS.API.Models.AccessLayer.Interfaces
@using DUPSS.Web.Components.Service
@using DUPSS.API.Models.DTOs

@inject EmailService EmailService
@inject AppointmentApiService AppointmentService
@inject UserApiService UserService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JS

<div class="vangogh-bg">
    <div class="vangogh-stars"></div>
    <div class="vangogh-swirls"></div>
    <div class="book-appointment-outer">
        <div class="soft-card vangogh-card">
            <h3>
                <span class="vangogh-title">🎨 Booking appointment with consultant</span>
            </h3>

            @if (consultants == null)
            {
                <div class="vangogh-loader">
                    <span>Loading consultants...</span>
                </div>
            }
            else if (!canBook)
            {
                <div class="alert alert-warning vangogh-alert">
                    <span class="vangogh-alert-icon">⚠️</span>
                    You already have @MaxActiveAppointments active appointment(s). Please cancel or finish them before booking a new one.
                </div>
            }
            else
            {
                <div class="vangogh-form-container">
                    <EditForm Model="newAppointment" OnValidSubmit="HandleBooking" class="edit-form">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="vangogh-validation" />

                        @* OLD CODE: Manual or auto-select consultant
                        <div class="mb-2">
                            <label class="form-label ms-2">Let system auto-assign consultant</label>
                            <InputCheckbox @bind-Value="autoSelectConsultant" />                       
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Choose Consultant</label>
                            <InputSelect @bind-Value="newAppointment.ConsultantId" class="form-select" disabled="@autoSelectConsultant">
                                <option value="">-- Choose Consultant --</option>
                                @foreach (var consultant in consultants)
                                {
                                    <option value="@consultant.UserId">@consultant.Username</option>
                                }
                            </InputSelect>
                        </div>
                        *@

                        <div class="mb-3">
                            <label class="form-label">Choose date</label>
                            <select class="form-select" value="@selectedDateString" @onchange="OnDateChanged">
                                <option value="">-- Choose date --</option>
                                @foreach (var day in allAvailableSlots.Select(s => s.Date).Distinct())
                                {
                                    <option value="@day.ToString("yyyy-MM-dd")">@day.ToString("dddd, dd/MM/yyyy")</option>
                                }
                            </select>
                        </div>

                        @if (availableSlotsInDay.Any())
                        {
                            <div class="mb-3">
                                <label class="form-label">Choose time slot</label>
                                <select class="form-select" @bind="selectedSlotString">
                                    <option value="">-- Choose a slot --</option>
                                    @foreach (var slot in availableSlotsInDay)
                                    {
                                        <option value="@slot.ToString("o")">
                                            @slot.ToLocalTime().ToString("HH:mm")
                                            -
                                            @slot.AddMinutes(40).ToLocalTime().ToString("HH:mm")
                                        </option>
                                    }
                                </select>
                            </div>
                        }

                        <div class="mb-3">
                            <label class="form-label">Topic (Describe what you'd like to discuss)</label>
                            <InputText class="form-control" @bind-Value="newAppointment.Topic" />
                        </div>

                        <div class="vangogh-btn-row">
                            <button class="btn btn-primary vangogh-btn" type="submit">
                                <span class="vangogh-btn-text">Book Now</span> <span class="vangogh-btn-brush">🖌️</span>
                            </button>
                        </div>
                    </EditForm>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<UserDTO>? consultants;
    private List<AppointmentDTO> existingAppointments = new();
    private const int MaxActiveAppointments = 1;
    private bool canBook = true;
    private List<AppointmentDTO>? userAppointments;

   
    // private bool autoSelectConsultant = true;

    private List<DateTime> allAvailableSlots = new(); // all slot in 7 days
    private List<DateTime> availableSlotsInDay = new(); // slots in selected day
    private string? selectedDateString;
    private string? selectedSlotString;

    private AppointmentDTO newAppointment = new()
        {
            AppointmentId = "",
            MemberId = "",
            ConsultantId = "",
            AppointmentDate = DateTime.Today.AddDays(1),
            Status = "Pending",
            Topic = ""
        };

    protected override async Task OnInitializedAsync()
    {
        consultants = await UserService.GetConsultantsAsync();

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var memberId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value
                        ?? user.FindFirst("sub")?.Value
                        ?? user.FindFirst("MemberId")?.Value;



            if (!string.IsNullOrEmpty(memberId))
            {
                string? userId = memberId; 

                userAppointments = await AppointmentService.GetAppointmentsForMemberAsync(userId);
                await AutoUpdateExpiredAppointments();


                newAppointment.MemberId = memberId;

                existingAppointments = await AppointmentService.GetAppointmentsForMemberAsync(memberId);
                var activeCount = existingAppointments.Count(a => a.Status is "Pending" or "Accepted");
                canBook = activeCount < MaxActiveAppointments;

                
            }
        }
        else
        {
            Navigation.NavigateTo("/login", true);
        }

        GenerateAvailableSlots();
    }


    

    private async Task AutoUpdateExpiredAppointments()
    {
        var now = DateTime.UtcNow;
        var appointmentDuration = TimeSpan.FromMinutes(40); 
        var minAcceptLeadTime = TimeSpan.FromMinutes(30);

        foreach (var appt in userAppointments)
        {
   
            if (appt.Status == "Accepted" && appt.AppointmentDate + TimeSpan.FromHours(1) < now)
            {
                var success = await AppointmentService.UpdateAppointmentStatusAsync(appt.AppointmentId, "Missed");
                if (success)
                {
                    appt.Status = "Missed";
                }
            }

        
            if (appt.Status == "Pending" && appt.AppointmentDate - now <= minAcceptLeadTime)
            {
                var success = await AppointmentService.UpdateAppointmentStatusAsync(appt.AppointmentId, "Expired");
                if (success)
                {
                    appt.Status = "Expired";
                }
            }
        }
    }





    private void OnDateChanged(ChangeEventArgs e)
    {
        selectedDateString = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedDateString))
        {
            DateTime selectedDate = DateTime.Parse(selectedDateString);
            availableSlotsInDay = allAvailableSlots
                .Where(s => s.Date == selectedDate.Date)
                .OrderBy(s => s)
                .ToList();
        }
        else
        {
            availableSlotsInDay.Clear();
        }
    }

    private void GenerateAvailableSlots()
    {
        allAvailableSlots.Clear();
        DateTime now = DateTime.Now;
        DateTime minTime = now.AddHours(12);
        DateTime endDate = now.Date.AddDays(7);

        TimeSpan slotDuration = TimeSpan.FromMinutes(40);
        TimeSpan slotStep = TimeSpan.FromMinutes(45);

        TimeSpan eveningStart = TimeSpan.FromHours(17.5); // 17:30
        TimeSpan eveningEnd = TimeSpan.FromHours(21.5);   // 21:30

        TimeSpan morningStart = TimeSpan.FromHours(9);
        TimeSpan morningEnd = TimeSpan.FromHours(11.5);

        for (DateTime day = now.Date; day <= endDate; day = day.AddDays(1))
        {
            var dayOfWeek = day.DayOfWeek;

            if (dayOfWeek >= DayOfWeek.Monday && dayOfWeek <= DayOfWeek.Friday)
            {
                AddSlotsForPeriod(day, eveningStart, eveningEnd, slotDuration, slotStep, minTime);
            }
            else
            {
                AddSlotsForPeriod(day, morningStart, morningEnd, slotDuration, slotStep, minTime);
                AddSlotsForPeriod(day, eveningStart, eveningEnd, slotDuration, slotStep, minTime);
            }
        }
    }

    private void AddSlotsForPeriod(DateTime day, TimeSpan periodStart, TimeSpan periodEnd,
        TimeSpan slotDuration, TimeSpan slotStep, DateTime minTime)
    {
        for (var t = periodStart; t + slotDuration <= periodEnd; t += slotStep)
        {
            DateTime slot = day.Add(t);
            if (slot > minTime)
            {
                allAvailableSlots.Add(slot);
            }
        }
    }

    private async Task HandleBooking()
    {
        if (string.IsNullOrWhiteSpace(newAppointment.Topic))
        {
            await JS.InvokeVoidAsync("alert", "Please enter the topic.");
            return;
        }

        if (string.IsNullOrEmpty(selectedSlotString))
        {
            await JS.InvokeVoidAsync("alert", "Please choose a time slot.");
            return;
        }

        newAppointment.AppointmentDate = DateTime.Parse(selectedSlotString).ToUniversalTime();

        // Always auto-assign consultant
        var availableConsultants = await UserService.GetConsultantsAsync();
        var consultantLoad = new List<(UserDTO Consultant, int Load)>();

        foreach (var c in availableConsultants)
        {
            var consultantAppointments = await AppointmentService.GetAppointmentsForConsultantAsync(c.UserId);

            bool hasConflict = consultantAppointments.Any(a =>
            {
                if (a.Status is not ("Pending" or "Accepted")) return false;

                var existingStart = a.AppointmentDate;
                var existingEnd = existingStart.AddMinutes(40);
                var requestedStart = newAppointment.AppointmentDate;
                var requestedEnd = requestedStart.AddMinutes(40);

                return requestedStart < existingEnd && existingStart < requestedEnd;
            });

            if (!hasConflict)
            {
                int active = consultantAppointments.Count(a => a.Status is "Pending" or "Accepted");
                consultantLoad.Add((c, active));
            }


        }

        if (consultantLoad.Count == 0)
        {
            await JS.InvokeVoidAsync("alert", "No available consultant at selected time.");
            return;
        }

   
        int minLoad = consultantLoad.Min(x => x.Load);


        var candidates = consultantLoad.Where(x => x.Load == minLoad).ToList();

     
        var random = new Random();
        var best = candidates[random.Next(candidates.Count)];


        if (best.Consultant != null)
        {
            newAppointment.ConsultantId = best.Consultant.UserId;
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "No available consultant at selected time.");
            return;
        }

            // OLD CODE: manual consultant selection validation
            /*
            else
        {
            if (string.IsNullOrEmpty(newAppointment.ConsultantId))
            {
                await JS.InvokeVoidAsync("alert", "Please pick a consultant.");
                return;
                }

            var consultantAppointments = await AppointmentApiService.GetAppointmentsForConsultantAsync(newAppointment.ConsultantId);

            bool slotAlreadyTaken = consultantAppointments.Any(a =>
            {
                if (a.Status == "Cancel") return false;

                var existingStart = a.AppointmentDate;
                var existingEnd = existingStart.AddMinutes(40);
                var requestedStart = newAppointment.AppointmentDate;
                var requestedEnd = requestedStart.AddMinutes(40);

                return requestedStart < existingEnd && existingStart < requestedEnd;
                });

            if (slotAlreadyTaken)
            {
                await JS.InvokeVoidAsync("alert", "Consultant already has an appointment at this time.");
                return;
                }
            }
        */

                    var success = await AppointmentService.CreateAppointmentAsync(newAppointment);

        if (success)
        {
            await JS.InvokeVoidAsync("alert", "Appointment booked successfully!");
            Navigation.NavigateTo("/Appointment", true);

            var member = await UserService.GetUserByIdAsync(newAppointment.MemberId);
            var consultant = best.Consultant;

            if (member != null && !string.IsNullOrEmpty(member.Email))
            {
                var start = newAppointment.AppointmentDate.ToLocalTime();
                var end = start.AddMinutes(40);
                var subject = "Appointment Booked Successfully";
                var cancelDeadline = newAppointment.AppointmentDate.ToLocalTime().AddHours(-2);
                var body = $"Hello {member.Username},\n\n" +
                           $"Your appointment at {start:dd/MM/yyyy HH:mm} - {end:HH:mm}\n" +
                           $"with consultant: {consultant?.Username ?? "Unknown"} has been booked successfully.\n\n" +
                           $"Please be on time and check your notifications for any updates.\n\n" +
                           $"Note: You can cancel this appointment before {cancelDeadline:HH:mm dd/MM/yyyy}.";


                await EmailService.SendEmailAsync(member.Email, subject, body);
            }

            // Send email to consultant
            if (consultant != null && !string.IsNullOrEmpty(consultant.Email))
            {
                var start = newAppointment.AppointmentDate.ToLocalTime();
                var end = start.AddMinutes(40);
                var subject = "New Appointment Assigned";
                var body = $"Hello {consultant.Username}\n\n" +
                           $"You have been assigned a new appointment with member: {member?.Username ?? "Unknown"}.\n" +
                           $"Time: {start:dd/MM/yyyy HH:mm} - {end:HH:mm}\n" +
                           $"Topic: {newAppointment.Topic}\n" +
                           $"Please check your schedule in the system for more details.";

                await EmailService.SendEmailAsync(consultant.Email, subject, body);
            }


        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Failed to book appointment.");
        }
    }
}
