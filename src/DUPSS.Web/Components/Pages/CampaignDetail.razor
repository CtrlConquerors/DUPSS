@page "/Campaign/Detail/{CampaignId}"
@using DUPSS.API.Models.DTOs
@using System.Security.Claims
@using DUPSS.Web.Components.Service
@inject CampaignApiService CampaignApiService
@inject CampaignRegistrationApiService CampaignRegistrationApiService
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthProvider
@inject IWebHostEnvironment WebHostEnvironment

@* Custom Message Box for alerts/confirms instead of alert() *@



@if (campaign == null)
{
    <p>Loading campaign details...</p>
}
else
{
    <div class="campaign-detail-container">
        <div class="campaign-hero-wrapper">
            @* Use the constructed ImageUrl for background-image *@
            <div class="campaign-hero-image" style="background-image: url('@(campaign.ImageUrl ?? "https://placehold.co/1200x400/F0F0F0/000000?text=Campaign+Image")');"></div>
            <div class="campaign-hero-title">
                <span class="title-letters">
                    @foreach (var word in campaign.Title.Split(' '))
                    {
                        <span class="title-word">
                            @foreach (var c in word)
                            {
                                <span class="title-letter">@c</span>
                            }
                        </span>
                        <span> </span>
                    }
                </span>
                <div class="campaign-hero-meta">
                    <div class="info-row">
                        <label>Status:</label>
                        <span>@campaign.Status</span>
                    </div>
                    <div class="info-row">
                        <label>Location:</label>
                        <span>@campaign.Location</span>
                    </div>
                    <div class="info-row">
                        <label>Phase</label>
                        <span>
                            @campaign.StartDate.ToString("dd/MM/yyyy")
                            –
                            @(campaign.EndDate?.ToString("dd/MM/yyyy") ?? "N/A")
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="campaign-section">
            <div>@((MarkupString)campaign.Introduction.Replace("\n", "<br />"))</div>
        </div>
    </div>


    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @messageCssClass alert-dismissible fade show" role="alert">
            @message
            <button type="button" class="btn-close" @onclick="ClearMessage" aria-label="Close"></button>
        </div>
    }


    @if (campaign.Status == "Active" || campaign.Status == "Planned")
    {
        <AuthorizeView Roles="ME,AD,ST,MA,CO">
            <Authorized>
                <div class="campaign-card animate-fadein">
                    <h3 class="card-title">🎯 Campaign Actions</h3>
                    <div class="action-buttons">
                        <button class="fancy-btn register" @onclick="HandleRegister">🚀 Join Campaign</button>
                        <button class="fancy-btn unregister" @onclick="@(() => HandleUnregister(CampaignId))">❌ Leave Campaign</button>
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="campaign-card warning-card animate-fadein">
                    <h3 class="card-title">🔒 Access Restricted</h3>
                    <p>You need to be a member to join this campaign.</p>
                    <a href="/register" class="link-cta">✨ Become a Member</a>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    }

    <div class="campaign-card animate-fadein">
        <h3 class="card-title">📝 Campaign Survey</h3>
        <div class="survey-buttons">
            @if (campaign.Status == "Active" || campaign.Status == "Planned")
            {
                <a href="https://docs.google.com/forms/d/e/1FAIpQLSfhtJRyq5c0GmCAKJRunIG9bbNelNwSIkt_IVAARJPIKjTcoA/viewform?usp=dialog"
                   class="fancy-btn survey">🧠 Pre-Campaign Survey</a>
            }
            else if (campaign.Status == "Completed")
            {
                <a href="https://docs.google.com/forms/d/e/1FAIpQLSeJ165SU_u1cYj_QoHYLIpksk-ji26nFbCLxADWpVHr9jhfYg/viewform?usp=dialog"
                   class="fancy-btn survey">📊 Post-Campaign Survey</a>
            }
        </div>
    </div>




    <Footer />
}

@code {
    [Parameter]
    public string CampaignId { get; set; } = string.Empty;
    private string? MemberId;

    private CampaignDTO? campaign;

    // NEW: For custom message display
    private string message = string.Empty;
    private string messageCssClass = string.Empty; // e.g., "alert-success", "alert-danger"

    private void ShowMessage(string msg, bool isSuccess)
    {
        message = msg;
        messageCssClass = isSuccess ? "alert-success" : "alert-danger";
        StateHasChanged();
    }

    private void ClearMessage()
    {
        message = string.Empty;
        messageCssClass = string.Empty;
        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine($"CampaignDetail: OnInitializedAsync: Loading campaign with ID: {CampaignId}");
            campaign = await CampaignApiService.GetByIdAsync(CampaignId);

            // NEW: Logic to construct ImageUrl from wwwroot/images
            if (campaign != null && !string.IsNullOrEmpty(campaign.CampaignId))
            {
                var wwwrootPath = WebHostEnvironment.WebRootPath;
                var imagesPath = Path.Combine(wwwrootPath, "images", "Campaigns");
                var supportedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp" };
                Console.WriteLine($"CampaignDetail: wwwrootPath: {wwwrootPath}");
                Console.WriteLine($"CampaignDetail: imagesPath: {imagesPath}");

                bool imageFound = false;
                foreach (var ext in supportedExtensions)
                {
                    var potentialFileName = $"{campaign.CampaignId}{ext}";
                    var fullPath = Path.Combine(imagesPath, potentialFileName);

                    if (System.IO.File.Exists(fullPath))
                    {
                        campaign.ImageUrl = $"images/Campaigns/{potentialFileName}"; // Set the relative URL for display
                        Console.WriteLine($"CampaignDetail: Found image for CampaignId {campaign.CampaignId}: {campaign.ImageUrl}");
                        imageFound = true;
                        break;
                    }
                }
                if (!imageFound)
                {
                    Console.WriteLine($"CampaignDetail: No image found for CampaignId {campaign.CampaignId} in {imagesPath}. ImageUrl remains: {campaign.ImageUrl ?? "null/empty"}");
                    // If no image is found, ensure ImageUrl is null or empty so the placeholder can be used
                    campaign.ImageUrl = null;
                }
            }
            else if (campaign != null) // If campaign exists but CampaignId is empty/null, ensure ImageUrl is null
            {
                campaign.ImageUrl = null;
            }


            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                MemberId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value
                                ?? user.FindFirst("sub")?.Value
                                ?? user.FindFirst("MemberId")?.Value;
                Console.WriteLine($"CampaignDetail: Authenticated User MemberId: {MemberId}");
            }
            else
            {
                Console.WriteLine("CampaignDetail: User not authenticated.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"CampaignDetail: Error loading campaign detail: {ex.Message}");
            ShowMessage($"Error loading campaign details: {ex.Message}", false);
        }
    }

    private async Task HandleRegister()
    {
        ClearMessage(); // Clear previous messages
        if (string.IsNullOrEmpty(MemberId))
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                MemberId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value
                                ?? user.FindFirst("sub")?.Value
                                ?? user.FindFirst("MemberId")?.Value;
            }

            if (string.IsNullOrEmpty(MemberId))
            {
                ShowMessage("Failed to retrieve Member ID. Please login again.", false);
                NavigationManager.NavigateTo("/login");
                return;
            }
        }

        var registration = new
        {
            MemberId = MemberId,
            CampaignId = CampaignId,
            RegisteredAt = DateTime.UtcNow
        };

        // No need to serialize manually, PostAsJsonAsync handles it
        // var registrationJson = System.Text.Json.JsonSerializer.Serialize(registration);

        try
        {
            var response = await HttpClientFactory.CreateClient("ApiClient")
                .PostAsJsonAsync("api/CampaignRegistration", registration);

            if (response.IsSuccessStatusCode)
            {
                ShowMessage("You have successfully registered for the campaign!", true);
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
            {
                ShowMessage("You have already registered for this campaign.", false);
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                ShowMessage($"Failed to register. Server said: {response.StatusCode} - {content}", false);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during registration: {ex.Message}");
            ShowMessage($"An error occurred during registration: {ex.Message}", false);
        }
    }

    private async Task HandleUnregister(string campaignId)
    {
        ClearMessage(); // Clear previous messages
        // Replace JS.InvokeAsync<bool>("confirm", ...) with a custom confirmation modal if preferred
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure to unregister this campaign?"); 
        if (!confirmed) return;

        try
        {
            var success = await CampaignRegistrationApiService.UnregisterAsync(MemberId, campaignId);
            if (success)
            {
                ShowMessage("Unregister success.", true);
            }
            else
            {
                ShowMessage("Unregister failed. Please try again.", false);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during unregistration: {ex.Message}");
            ShowMessage($"An error occurred during unregistration: {ex.Message}", false);
        }
    }

}
