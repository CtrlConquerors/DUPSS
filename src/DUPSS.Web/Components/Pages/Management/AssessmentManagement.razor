@page "/Management/Assessment"
@using DUPSS.Web.Components.Service
@using DUPSS.Web.Components.Layout
@using DUPSS.API.Models.DTOs
@inject NavigationManager NavigationManager
@inject AssessmentApiService AssessmentApiService
@inject AssessmentQuestionApiService QuestionApiService
@inject AssessmentAnswerApiService AnswerApiService
@inject IJSRuntime JSRuntime
@layout ManagementLayout
<AuthorizeView Roles="AD,MA"> 
    <Authorized>
<div class="assessment-management-container">
    <h1>Assessment Management</h1>

    <div class="management-actions">
        <button @onclick="ShowCreateAssessmentForm">Create New Assessment</button>
        <button @onclick="ImportPremadeAssessments">Import Premade Assessments</button>
        <button @onclick="RefreshAssessments">Refresh List</button>
    </div>

    @if (isLoading)
    {
        <div class="loading">
            <p>Loading assessments...</p>
        </div>
    }
    else if (hasError)
    {
        <div class="error">
            <p>Error loading assessments: @errorMessage</p>
            <button @onclick="RefreshAssessments">Retry</button>
        </div>
    }
    else
    {
        @if (showCreateForm)
        {
            <div class="create-form">
                <h3>Create New Assessment</h3>
                <form @onsubmit="CreateAssessment" @onsubmit:preventDefault="true">
                    <div class="form-group">
                        <label for="assessmentType">Assessment Type:</label>
                        <input id="assessmentType" @bind="newAssessment.AssessmentType" required/>
                    </div>
                    <div class="form-group">
                        <label for="version">Version:</label>
                        <input id="version" @bind="newAssessment.Version" required/>
                    </div>
                    <div class="form-group">
                        <label for="language">Language:</label>
                        <input id="language" @bind="newAssessment.Language" required/>
                    </div>
                    <div class="form-group">
                        <label for="description">Description:</label>
                        <textarea id="description" @bind="newAssessment.Description"></textarea>
                    </div>
                    <div class="form-actions">
                        <button type="submit">Create Assessment</button>
                        <button type="button" @onclick="CancelCreate">Cancel</button>
                    </div>
                </form>
            </div>
        }

        <div class="assessments-list">
            <h3>Existing Assessments</h3>
            @if (assessments != null && assessments.Any())
            {
                <table>
                    <thead>
                    <tr>
                        <th>ID</th>
                        <th>Type</th>
                        <th>Version</th>
                        <th>Language</th>
                        <th>Description</th>
                        <th>Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                        @foreach (var assessment in assessments)
                        {
                            <tr>
                                <td>@assessment.AssessmentId</td>
                                <td>@assessment.AssessmentType</td>
                                <td>@assessment.Version</td>
                                <td>@assessment.Language</td>
                                <td>@(assessment.Description ?? "No description")</td>
                                <td class="actions-cell">
                                    <button class="action-menu-btn" @onclick="() => OpenActionMenu(assessment)">
                                        <i class="fas fa-ellipsis-vertical"></i>
                                    </button>
                                </td>
                            </tr>
                        }

                        @if (actionMenuOpenAssessment != null)
                        {
                            <div class="action-modal-overlay" @onclick="CloseActionMenu">
                                <div class="action-modal-dialog" @onclick:stopPropagation>
                                    <button class="popup-action-btn edit" @onclick="() => { EditAssessment(actionMenuOpenAssessment); CloseActionMenu(); }">Edit</button>
                                    <button class="popup-action-btn manage" @onclick="() => { ManageQuestions(actionMenuOpenAssessment.AssessmentId); CloseActionMenu(); }">Manage Questions</button>
                                    <button class="popup-action-btn delete" @onclick="() => { DeleteAssessment(actionMenuOpenAssessment.AssessmentId); CloseActionMenu(); }">Delete</button>
                                </div>
                            </div>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No assessments found.</p>
            }
        </div>

        @if (showEditForm && editingAssessment != null)
        {
            <div class="edit-form">
                <h3>Edit Assessment</h3>
                <form @onsubmit="UpdateAssessment" @onsubmit:preventDefault="true">
                    <div class="form-group">
                        <label for="editAssessmentType">Assessment Type:</label>
                        <input id="editAssessmentType" @bind="editingAssessment.AssessmentType" required/>
                    </div>
                    <div class="form-group">
                        <label for="editVersion">Version:</label>
                        <input id="editVersion" @bind="editingAssessment.Version" required/>
                    </div>
                    <div class="form-group">
                        <label for="editLanguage">Language:</label>
                        <input id="editLanguage" @bind="editingAssessment.Language" required/>
                    </div>
                    <div class="form-group">
                        <label for="editDescription">Description:</label>
                        <textarea id="editDescription" @bind="editingAssessment.Description"></textarea>
                    </div>
                    <div class="form-actions">
                        <button type="submit">Update Assessment</button>
                        <button type="button" @onclick="CancelEdit">Cancel</button>
                    </div>
                </form>
            </div>
        }
    }
</div>
    </Authorized>
    <NotAuthorized>
        <div class="access-denied">
            <h2>Access Denied</h2>
            <p>
                You do not have permission to access this page. Please <a href="/login">log in</a> with an authorized
                account.
            </p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<AssessmentDTO>? assessments;
    private string? actionMenuOpenId = null;
    private AssessmentDTO? actionMenuOpenAssessment = null;
    private bool isLoading = true;
    private bool hasError = false;
    private string errorMessage = "";
    private bool showCreateForm = false;
    private bool showEditForm = false;
    private AssessmentDTO newAssessment = new() { AssessmentId = "", AssessmentType = "", Version = "1.0", Language = "eng" };
    private AssessmentDTO? editingAssessment = null;
    private readonly List<string> substances = new()
    {
        "Tobacco", "Alcohol", "Cannabis", "Cocaine", "Amphetamines",
        "Inhalants", "Sedatives", "Hallucinogens", "Opioids", "Other"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAssessments();
    }
    private void ToggleActionMenu(string assessmentId)
    {
        if (actionMenuOpenId == assessmentId)
            actionMenuOpenId = null;
        else
            actionMenuOpenId = assessmentId;
    }

    private void OpenActionMenu(AssessmentDTO assessment)
    {
        actionMenuOpenAssessment = assessment;
    }

    private void CloseActionMenu()
    {
        actionMenuOpenAssessment = null;
    }
    private async Task LoadAssessments()
    {
        try
        {
            isLoading = true;
            hasError = false;
            assessments = await AssessmentApiService.GetAllAsync();
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ImportPremadeAssessments()
    {
        try
        {
            // Check for existing assessments
            var existingAssessments = await AssessmentApiService.GetAllAsync();
            const string ASSIST = "ASSIST-eng-3.0";
            const string CRAFFT = "CRAFFT-eng-2.1";
            var assistExists = existingAssessments.Any(a => a.AssessmentId == ASSIST);
            var crafftExists = existingAssessments.Any(a => a.AssessmentId == CRAFFT);

            // Import ASSIST
            if (!assistExists)
            {
                var assist = new AssessmentDTO
                {
                    AssessmentId = ASSIST,
                    AssessmentType = "ASSIST",
                    Version = "3.0",
                    Language = "eng",
                    Description = "Alcohol, Smoking and Substance Involvement Screening Test"
                };
                await AssessmentApiService.CreateAsync(assist);
                Console.WriteLine("Created ASSIST assessment");

                var frequencyAnswers = new List<AssessmentAnswerDTO>
                {
                    new() { QuestionId = "", AnswerId = "ASSIST_fA_0", Answer = "Never", ScoreValue = 0 },
                    new() { QuestionId = "", AnswerId = "ASSIST_fA_2", Answer = "Once or twice", ScoreValue = 2 },
                    new() { QuestionId = "", AnswerId = "ASSIST_fA_3", Answer = "Monthly", ScoreValue = 3 },
                    new() { QuestionId = "", AnswerId = "ASSIST_fA_4", Answer = "Weekly", ScoreValue = 4 },
                    new() { QuestionId = "", AnswerId = "ASSIST_fA_6", Answer = "Daily or almost daily", ScoreValue = 6 }
                };

                var yesNoAnswers = new List<AssessmentAnswerDTO>
                {
                    new() { QuestionId = "", AnswerId = "ASSIST_yNA_yes", Answer = "Yes", ScoreValue = 0 },
                    new() { QuestionId = "", AnswerId = "ASSIST_yNA_no", Answer = "No", ScoreValue = 0 }
                };

                var injectionAnswers = new List<AssessmentAnswerDTO>
                {
                    new() { QuestionId = "", AnswerId = "ASSIST_iA_0", Answer = "Never", ScoreValue = 0 },
                    new() { QuestionId = "", AnswerId = "ASSIST_iA_6", Answer = "Yes, in the past 3 months", ScoreValue = 6 },
                    new() { QuestionId = "", AnswerId = "ASSIST_iA_3", Answer = "Yes, but not in the past 3 months", ScoreValue = 3 }
                };

                int sequence = 0;
                foreach (var substance in substances)
                {
                    var substanceId = substance.ToUpper().Replace(" ", "_");
                    var substanceQuestions = new List<AssessmentQuestionDTO>
                    {
                        new() { QuestionId = $"{ASSIST}_{substanceId}_Q1", AssessmentId = ASSIST, Question = $"In your life, have you ever used {substance.ToLower()}?", QuestionType = "YesNo", Sequence = sequence++ },
                        new() { QuestionId = $"{ASSIST}_{substanceId}_Q2", AssessmentId = ASSIST, Question = $"In the past 3 months, how often have you used {substance.ToLower()}?", QuestionType = "MultipleChoice", Sequence = sequence++ },
                        new() { QuestionId = $"{ASSIST}_{substanceId}_Q3", AssessmentId = ASSIST, Question = $"In the past 3 months, how often have you had a strong desire or urge to use {substance.ToLower()}?", QuestionType = "MultipleChoice", Sequence = sequence++ },
                        new() { QuestionId = $"{ASSIST}_{substanceId}_Q4", AssessmentId = ASSIST, Question = $"In the past 3 months, how often has {substance.ToLower()} use led to health, social, legal, or financial problems?", QuestionType = "MultipleChoice", Sequence = sequence++ },
                        new() { QuestionId = $"{ASSIST}_{substanceId}_Q5", AssessmentId = ASSIST, Question = $"In the past 3 months, how often have you failed to do what was normally expected of you because of {substance.ToLower()}?", QuestionType = "MultipleChoice", Sequence = sequence++ },
                        new() { QuestionId = $"{ASSIST}_{substanceId}_Q6", AssessmentId = ASSIST, Question = $"Has a friend or relative or anyone else ever expressed concern about your use of {substance.ToLower()}?", QuestionType = "YesNo", Sequence = sequence++ },
                        new() { QuestionId = $"{ASSIST}_{substanceId}_Q7", AssessmentId = ASSIST, Question = $"Have you ever tried and failed to control, cut down, or stop using {substance.ToLower()}?", QuestionType = "YesNo", Sequence = sequence++ },
                        new() { QuestionId = $"{ASSIST}_{substanceId}_Q8", AssessmentId = ASSIST, Question = $"Have you ever used {substance.ToLower()} by injection?", QuestionType = "MultipleChoice", Sequence = sequence++ }
                    };

                    foreach (var question in substanceQuestions)
                    {
                        await QuestionApiService.CreateAsync(question);
                        Console.WriteLine($"Created question: {question.QuestionId}, Sequence: {question.Sequence}");

                        if (question.QuestionId.EndsWith("_Q1"))
                        {
                            foreach (var answer in yesNoAnswers)
                            {
                                var answerDto = new AssessmentAnswerDTO
                                {
                                    AnswerId = $"{ASSIST}_{substanceId}_Q1_{answer.Answer.ToUpper()}",
                                    QuestionId = question.QuestionId,
                                    Answer = answer.Answer,
                                    ScoreValue = answer.ScoreValue
                                };
                                await AnswerApiService.CreateAsync(answerDto);
                                Console.WriteLine($"Created answer: {answerDto.AnswerId}");
                            }
                        }
                        else if (question.QuestionId.EndsWith("_Q6"))
                        {
                            foreach (var answer in yesNoAnswers)
                            {
                                var answerDto = new AssessmentAnswerDTO
                                {
                                    AnswerId = $"{ASSIST}_{substanceId}_Q6_{answer.Answer.ToUpper()}",
                                    QuestionId = question.QuestionId,
                                    Answer = answer.Answer,
                                    ScoreValue = answer.Answer == "Yes" ? 7 : 0
                                };
                                await AnswerApiService.CreateAsync(answerDto);
                                Console.WriteLine($"Created answer: {answerDto.AnswerId}");
                            }
                        }
                        else if (question.QuestionId.EndsWith("_Q7"))
                        {
                            foreach (var answer in yesNoAnswers)
                            {
                                var answerDto = new AssessmentAnswerDTO
                                {
                                    AnswerId = $"{ASSIST}_{substanceId}_Q7_{answer.Answer.ToUpper()}",
                                    QuestionId = question.QuestionId,
                                    Answer = answer.Answer,
                                    ScoreValue = answer.Answer == "Yes" ? 4 : 0
                                };
                                await AnswerApiService.CreateAsync(answerDto);
                                Console.WriteLine($"Created answer: {answerDto.AnswerId}");
                            }
                        }
                        else if (question.QuestionId.EndsWith("_Q8"))
                        {
                            foreach (var answer in injectionAnswers)
                            {
                                var answerDto = new AssessmentAnswerDTO
                                {
                                    AnswerId = $"{ASSIST}_{substanceId}_Q8_{answer.Answer.ToUpper().Replace(" ", "_").Replace(",", "")}",
                                    QuestionId = question.QuestionId,
                                    Answer = answer.Answer,
                                    ScoreValue = answer.ScoreValue
                                };
                                await AnswerApiService.CreateAsync(answerDto);
                                Console.WriteLine($"Created answer: {answerDto.AnswerId}");
                            }
                        }
                        else
                        {
                            foreach (var answer in frequencyAnswers)
                            {
                                var answerDto = new AssessmentAnswerDTO
                                {
                                    AnswerId = $"{ASSIST}_{substanceId}_{question.QuestionId.Split('_')[2]}_{answer.Answer.ToUpper().Replace(" ", "_")}",
                                    QuestionId = question.QuestionId,
                                    Answer = answer.Answer,
                                    ScoreValue = answer.ScoreValue
                                };
                                await AnswerApiService.CreateAsync(answerDto);
                                Console.WriteLine($"Created answer: {answerDto.AnswerId}");
                            }
                        }
                    }
                }
            }

            // Import CRAFFT
            if (!crafftExists)
            {
                var crafft = new AssessmentDTO
                {
                    AssessmentId = CRAFFT,
                    AssessmentType = "CRAFFT",
                    Version = "2.1",
                    Language = "eng",
                    Description = "Car, Relax, Alone, Forget, Friends, Trouble Screening"
                };
                await AssessmentApiService.CreateAsync(crafft);
                Console.WriteLine("Created CRAFFT assessment");

                var crafftQuestions = new List<AssessmentQuestionDTO>
                {
                    new() { QuestionId = $"{CRAFFT}_Q1", AssessmentId = CRAFFT, Question = "During the PAST 12 MONTHS, on how many days did you drink more than a few sips of beer, wine, or any drink containing alcohol? Put '0' if none.", QuestionType = "Numeric", Sequence = 0 },
                    new() { QuestionId = $"{CRAFFT}_Q2", AssessmentId = CRAFFT, Question = "During the PAST 12 MONTHS, on how many days did you use any marijuana (cannabis, weed, oil, wax, or hash by smoking, vaping, dabbing, or in edibles) or 'synthetic marijuana' (like 'K2,' 'Spice')? Put '0' if none.", QuestionType = "Numeric", Sequence = 1 },
                    new() { QuestionId = $"{CRAFFT}_Q3", AssessmentId = CRAFFT, Question = "During the PAST 12 MONTHS, on how many days did you use anything else to get high (like other illegal drugs, pills, prescription or over-the-counter medications, and things that you sniff, huff, vape, or inject)? Put '0' if none.", QuestionType = "Numeric", Sequence = 2 },
                    new() { QuestionId = $"{CRAFFT}_Q4", AssessmentId = CRAFFT, Question = "Have you ever ridden in a CAR driven by someone (including yourself) who was high or had been using alcohol or drugs?", QuestionType = "YesNo", Sequence = 3 },
                    new() { QuestionId = $"{CRAFFT}_Q5", AssessmentId = CRAFFT, Question = "Do you ever use alcohol or drugs to RELAX, feel better about yourself, or fit in?", QuestionType = "YesNo", Sequence = 4 },
                    new() { QuestionId = $"{CRAFFT}_Q6", AssessmentId = CRAFFT, Question = "Do you ever use alcohol or drugs while you are by yourself, ALONE?", QuestionType = "YesNo", Sequence = 5 },
                    new() { QuestionId = $"{CRAFFT}_Q7", AssessmentId = CRAFFT, Question = "Do you ever FORGET things you did while using alcohol or drugs?", QuestionType = "YesNo", Sequence = 6 },
                    new() { QuestionId = $"{CRAFFT}_Q8", AssessmentId = CRAFFT, Question = "Do your family or FRIENDS ever tell you that you should cut down on your drinking or drug use?", QuestionType = "YesNo", Sequence = 7 },
                    new() { QuestionId = $"{CRAFFT}_Q9", AssessmentId = CRAFFT, Question = "Have you ever gotten into TROUBLE while you were using alcohol or drugs?", QuestionType = "YesNo", Sequence = 8 }
                };

                foreach (var question in crafftQuestions)
                {
                    await QuestionApiService.CreateAsync(question);
                    Console.WriteLine($"Created question: {question.QuestionId}, Sequence: {question.Sequence}");

                    var answers = question.QuestionId switch
                    {
                        $"{CRAFFT}_Q1" or $"{CRAFFT}_Q2" or $"{CRAFFT}_Q3" => new List<AssessmentAnswerDTO>
                        {
                            new() { AnswerId = $"{question.QuestionId}_0", QuestionId = question.QuestionId, Answer = "0", ScoreValue = 0 },
                            new() { AnswerId = $"{question.QuestionId}_1PLUS", QuestionId = question.QuestionId, Answer = "1 or more", ScoreValue = 0 }
                        },
                        _ => new List<AssessmentAnswerDTO>
                        {
                            new() { AnswerId = $"{question.QuestionId}_YES", QuestionId = question.QuestionId, Answer = "Yes", ScoreValue = 1 },
                            new() { AnswerId = $"{question.QuestionId}_NO", QuestionId = question.QuestionId, Answer = "No", ScoreValue = 0 }
                        }
                    };

                    foreach (var answer in answers)
                    {
                        await AnswerApiService.CreateAsync(answer);
                        Console.WriteLine($"Created answer: {answer.AnswerId}");
                    }
                }
            }

            await LoadAssessments();
            await JSRuntime.InvokeVoidAsync("alert", "Hardcoded assessments imported successfully!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error importing assessments: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error importing assessments: {ex.Message}");
        }
    }

    private void ShowCreateAssessmentForm()
    {
        showCreateForm = true;
        showEditForm = false;
        newAssessment = new() { AssessmentId = "", AssessmentType = "", Version = "1.0", Language = "eng" };
    }

    private async Task CreateAssessment()
    {
        try
        {
            var assessment = new AssessmentDTO()
            {
                AssessmentId = newAssessment.AssessmentType + "-" + newAssessment.Language + "-" + newAssessment.Version,
                AssessmentType = newAssessment.AssessmentType,
                Version = newAssessment.Version,
                Language = newAssessment.Language,
                Description = newAssessment.Description
            };

            await AssessmentApiService.CreateAsync(assessment);
            await LoadAssessments();
            showCreateForm = false;
            await JSRuntime.InvokeVoidAsync("alert", "Assessment created successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error creating assessment: {ex.Message}");
        }
    }

    private void EditAssessment(AssessmentDTO assessment)
    {
        editingAssessment = new AssessmentDTO
        {
            AssessmentId = assessment.AssessmentId,
            AssessmentType = assessment.AssessmentType,
            Version = assessment.Version,
            Language = assessment.Language,
            Description = assessment.Description
        };
        showEditForm = true;
        showCreateForm = false;
    }

    private async Task UpdateAssessment()
    {
        try
        {
            if (editingAssessment != null)
            {
                var assessment = new AssessmentDTO
                {
                    AssessmentId = editingAssessment.AssessmentId,
                    AssessmentType = editingAssessment.AssessmentType,
                    Version = editingAssessment.Version,
                    Language = editingAssessment.Language,
                    Description = editingAssessment.Description
                };

                await AssessmentApiService.UpdateAsync(assessment);
                await LoadAssessments();
                showEditForm = false;
                editingAssessment = null;
                await JSRuntime.InvokeVoidAsync("alert", "Assessment updated successfully!");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating assessment: {ex.Message}");
        }
    }

    private async Task DeleteAssessment(string assessmentId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete assessment {assessmentId}?"))
        {
            try
            {
                await AssessmentApiService.DeleteAsync(assessmentId);
                await LoadAssessments();
                await JSRuntime.InvokeVoidAsync("alert", "Assessment deleted successfully!");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting assessment: {ex.Message}");
            }
        }
    }

    private void ManageQuestions(string assessmentId)
    {
        NavigationManager.NavigateTo($"/Management/Assessment/{assessmentId}/Questions/", forceLoad: true);
    }

    private async Task RefreshAssessments()
    {
        await LoadAssessments();
    }

    private void CancelCreate()
    {
        showCreateForm = false;
    }

    private void CancelEdit()
    {
        showEditForm = false;
        editingAssessment = null;
    }
}