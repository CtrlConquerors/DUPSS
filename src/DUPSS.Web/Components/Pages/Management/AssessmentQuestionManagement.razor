@page "/Management/Assessment/{AssessmentId}/Questions/"
@using DUPSS.Web.Components.Service
@using DUPSS.API.Models.DTOs
@inject NavigationManager NavigationManager
@inject AssessmentQuestionApiService QuestionApiService
@inject AssessmentApiService AssessmentApiService
@inject IJSRuntime JSRuntime

<AuthorizeView Roles="AD,MA"> 
    <Authorized>
<div class="question-management-container">
    <div class="navigation">
        <button @onclick="GoBackToAssessments">← Back to Assessments</button>
    </div>

    <h1>Question Management for Assessment: @AssessmentId</h1>

    @if (assessment != null)
    {
        <div class="assessment-info">
            <h3>Assessment: @assessment.AssessmentType</h3>
            <p>@assessment.Description</p>
        </div>
    }

    <div class="management-actions">
        <button @onclick="ShowCreateQuestionForm">Add New Question</button>
        <button @onclick="RefreshQuestions">Refresh Questions</button>
    </div>

    @if (isLoading)
    {
        <div class="loading">
            <p>Loading questions...</p>
        </div>
    }
    else if (hasError)
    {
        <div class="error">
            <p>Error loading questions: @errorMessage</p>
            <button @onclick="RefreshQuestions">Retry</button>
        </div>
    }
    else
    {
        @if (showCreateForm)
        {
            <div class="create-form">
                <h3>Create New Question</h3>
                <form @onsubmit="CreateQuestion" @onsubmit:preventDefault="true">
                    <div class="form-group">
                        <label for="questionText">Question Text:</label>
                        <textarea id="questionText" @bind="newQuestion.Question" required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="questionType">Question Type:</label>
                        <select id="questionType" @bind="newQuestion.QuestionType">
                            <option value="MultipleChoice">Multiple Choice</option>
                            <option value="YesNo">Yes/No</option>
                            <option value="Scale">Scale</option>
                            <option value="Text">Text</option>
                        </select>
                    </div>
                    @if (AssessmentId.StartsWith("ASSIST"))
                    {
                        <div class="form-group">
                            <label for="substance">Substance:</label>
                            <select id="substance" @bind="selectedSubstance">
                                @foreach (var substance in substances)
                                {
                                    <option value="@substance">@substance</option>
                                }
                            </select>
                        </div>
                    }
                    <div class="form-actions">
                        <button type="submit">Create Question</button>
                        <button type="button" @onclick="CancelCreateQuestion">Cancel</button>
                    </div>
                </form>
            </div>
        }

        <div class="questions-list">
            <h3>Questions</h3>
            @if (questions != null && questions.Any())
            {
                <table>
                    <thead>
                    <tr>
                        <th>Question ID</th>
                        <th>Sequence</th>
                        <th>Question Text</th>
                        <th>Type</th>
                        <th>Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var question in questions.OrderBy(q => q.Sequence))
                    {
                        <tr>
                            <td>@question.QuestionId</td>
                            <td>@question.Sequence</td>
                            <td>@question.Question</td>
                            <td>@question.QuestionType</td>
                            <td>
                                <button @onclick="() => EditQuestion(question)">Edit</button>
                                <button @onclick="() => ManageAnswers(question.QuestionId)">Manage Answers</button>
                                <button @onclick="() => DeleteQuestion(question.QuestionId)">Delete</button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
            else
            {
                <p>No questions found for this assessment.</p>
            }
        </div>

        @if (showEditForm && editingQuestion != null)
        {
            <div class="edit-modal-overlay" @onclick="CancelEditQuestion">
                <div class="edit-modal-dialog" @onclick:stopPropagation>
                    <h3>Edit Question</h3>
                    <form @onsubmit="UpdateQuestion" @onsubmit:preventDefault="true">
                        <div class="form-group">
                            <label for="editQuestionText">Question Text:</label>
                            <textarea id="editQuestionText" @bind="editingQuestion.Question" required></textarea>
                        </div>
                        <div class="form-group">
                            <label for="editQuestionType">Question Type:</label>
                            <select id="editQuestionType" @bind="editingQuestion.QuestionType">
                                <option value="MultipleChoice">Multiple Choice</option>
                                <option value="YesNo">Yes/No</option>
                                <option value="Scale">Scale</option>
                                <option value="Text">Text</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="editSequence">Sequence:</label>
                            <input id="editSequence" type="number" @bind="editingQuestion.Sequence" required />
                        </div>
                        <div class="form-actions">
                            <button type="submit">Update Question</button>
                            <button type="button" @onclick="CancelEditQuestion">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        }
    }
</div>
    </Authorized>
    <NotAuthorized>
        <div class="access-denied">
            <h2>Access Denied</h2>
            <p>
                You do not have permission to access this page. Please <a href="/login">log in</a> with an authorized
                account.
            </p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string AssessmentId { get; set; } = string.Empty;

    private AssessmentDTO? assessment;
    private List<AssessmentQuestionDTO>? questions;
    private List<AssessmentQuestionDTO>? allQuestions;
    private bool isLoading = true;
    private bool hasError = false;
    private string errorMessage = "";
    private bool showCreateForm = false;
    private bool showEditForm = false;
    private AssessmentQuestionDTO newQuestion = new() { QuestionId = "", AssessmentId = "", Question = "", QuestionType = "MultipleChoice" };
    private AssessmentQuestionDTO? editingQuestion = null;
    int nextQuestionNumber = 1;
    private string selectedSubstance = "Tobacco";
    private readonly List<string> substances = new()
    {
        "Tobacco", "Alcohol", "Cannabis", "Cocaine", "Amphetamines",
        "Inhalants", "Sedatives", "Hallucinogens", "Opioids", "Other"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAssessment();
        await LoadQuestions();
    }

    private async Task LoadAssessment()
    {
        try
        {
            assessment = await AssessmentApiService.GetByIdAsync(AssessmentId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assessment: {ex.Message}");
        }
    }

    private async Task LoadQuestions()
    {
        try
        {
            isLoading = true;
            hasError = false;
            allQuestions = await QuestionApiService.GetAllAsync();
            questions = allQuestions?.Where(q => q.AssessmentId == AssessmentId).OrderBy(q => q.Sequence).ToList();
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowCreateQuestionForm()
    {
        newQuestion = new() { QuestionId = "", AssessmentId = AssessmentId, Question = "", QuestionType = "MultipleChoice" };
        selectedSubstance = substances.First();
        showCreateForm = true;
        showEditForm = false;
    }

    private async Task CreateQuestion()
    {
        try
        {
            if (AssessmentId.StartsWith("ASSIST"))
            {
                // Handle null or empty questions list
                var substanceQuestions = questions?.Where(q => q.QuestionId.StartsWith($"{AssessmentId}_{selectedSubstance.ToUpper().Replace(" ", "_")}_")).ToList() ?? new List<AssessmentQuestionDTO>();
                nextQuestionNumber = substanceQuestions.Count + 1;
                newQuestion.QuestionId = $"{AssessmentId}_{selectedSubstance.ToUpper().Replace(" ", "_")}_Q{nextQuestionNumber}";
                // Use 0 as default sequence if no questions exist
                var maxSequence = questions?.Any() == true ? questions.Where(q => q.AssessmentId == AssessmentId).Max(q => q.Sequence) : 0;
                newQuestion.Sequence = maxSequence + 1;
            }
            else
            {
                // Find the highest question number from existing QuestionIds
                int maxQuestionNumber = 0;
                if (questions?.Any() == true)
                {
                    maxQuestionNumber = questions
                        .Where(q => q.QuestionId.StartsWith($"{AssessmentId}_Q"))
                        .Select(q => int.Parse(q.QuestionId.Split('_').Last().Replace("Q", "")))
                        .DefaultIfEmpty(0)
                        .Max();
                }
                nextQuestionNumber = maxQuestionNumber + 1;
                newQuestion.QuestionId = $"{AssessmentId}_Q{nextQuestionNumber}";
                newQuestion.Sequence = questions?.Any() == true ? questions.Max(q => q.Sequence) + 1 : 0;
            }

            if (questions?.Any(q => q.QuestionId == newQuestion.QuestionId) == true)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error: Question ID {newQuestion.QuestionId} already exists.");
                return;
            }

            var question = new AssessmentQuestionDTO
            {
                QuestionId = newQuestion.QuestionId,
                AssessmentId = AssessmentId,
                Question = newQuestion.Question,
                QuestionType = newQuestion.QuestionType,
                Sequence = newQuestion.Sequence
            };

            await QuestionApiService.CreateAsync(question);
            Console.WriteLine($"Created question: {question.QuestionId}, Sequence: {question.Sequence}");
            await LoadQuestions();
            showCreateForm = false;
            await JSRuntime.InvokeVoidAsync("alert", "Question created successfully!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating question: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error creating question: {ex.Message}");
        }
    }

    private void EditQuestion(AssessmentQuestionDTO question)
    {
        editingQuestion = new AssessmentQuestionDTO
        {
            QuestionId = question.QuestionId,
            AssessmentId = question.AssessmentId,
            Question = question.Question,
            QuestionType = question.QuestionType,
            Sequence = question.Sequence
        };
        showEditForm = true;
        showCreateForm = false;
    }

    private async Task UpdateQuestion()
    {
        try
        {
            if (editingQuestion != null)
            {
                var question = new AssessmentQuestionDTO
                {
                    QuestionId = editingQuestion.QuestionId,
                    AssessmentId = editingQuestion.AssessmentId,
                    Question = editingQuestion.Question,
                    QuestionType = editingQuestion.QuestionType,
                    Sequence = editingQuestion.Sequence
                };

                await QuestionApiService.UpdateAsync(question);
                await LoadQuestions();
                showEditForm = false;
                editingQuestion = null;
                await JSRuntime.InvokeVoidAsync("alert", "Question updated successfully!");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating question: {ex.Message}");
        }
    }

    private async Task DeleteQuestion(string questionId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete question {questionId}? This will also delete all associated answers."))
        {
            try
            {
                await QuestionApiService.DeleteAsync(questionId);
                await LoadQuestions();
                await JSRuntime.InvokeVoidAsync("alert", "Question deleted successfully!");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting question: {ex.Message}");
            }
        }
    }

    private void ManageAnswers(string questionId)
    {
        NavigationManager.NavigateTo($"/Management/Assessment/{AssessmentId}/Questions/{questionId}/Answers/", forceLoad: true);
    }

    private async Task RefreshQuestions()
    {
        await LoadQuestions();
    }

    private void CancelCreateQuestion()
    {
        showCreateForm = false;
    }

    private void CancelEditQuestion()
    {
        showEditForm = false;
        editingQuestion = null;
    }

    private void GoBackToAssessments()
    {
        NavigationManager.NavigateTo("/Management/Assessment", forceLoad: true);
    }
}