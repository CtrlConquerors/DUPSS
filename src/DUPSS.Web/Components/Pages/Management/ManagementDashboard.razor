@page "/Management/Dashboard"
@using DUPSS.Web.Components.Layout
@using DUPSS.Web.Components.Service
@using DUPSS.API.Models.DTOs
@inject JwtAuthenticationStateProvider authStateProvider
@inject AppointmentApiService AppointmentApiService
@inject CampaignApiService CampaignApiService
@inject UserApiService UserApiService
@inject CourseApiService CourseApiService
@inject CourseEnrollApiService CourseEnrollApiService
@inject BlogApiService BlogApiService
@inject NavigationManager NavigationManager
@layout ManagementLayout
@using System.Text
@inject IJSRuntime JS

<AuthorizeView Roles="AD,MA">
    <Authorized>
        <h1>Management Dashboard</h1>
        <button class="btn btn-primary mb-3" @onclick="ExportDashboardReport">
            <i class="bi bi-download"></i> Export Report
        </button>
        @if (userName == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <p>Welcome @userName to the management home page. Here you can manage various aspects of the
                application.</p>
        }

        <div class="dashboard-main-grid">
            <div id="dashboard-cards" class="dashboard-cards">
                @for (int i = 0; i < dashboardCards.Count; i++)
                {
                    var card = dashboardCards[i];
                    <div class="dashboard-card"
                         data-index="@i"
                         draggable="true">
                        <div class="dashboard-card-icon @card.IconBg">
                            <i class="@card.BootstrapIcon"></i>
                        </div>
                        <div class="dashboard-card-content">
                            <div class="dashboard-card-title">@card.Title</div>
                            <div class="dashboard-card-value">@card.Value</div>
                        </div>
                    </div>
                }
                <!-- User Growth Mini Chart (not draggable for simplicity) -->
                <div class="dashboard-card" style="flex-direction:column; align-items:flex-start;">
                    <div style="display:flex;align-items:center;width:100%;">
                        <div class="dashboard-card-icon bg-purple"><i class="fas fa-chart-line"></i></div>
                        <div>
                            <div class="dashboard-card-title">User Growth</div>
                            <div class="dashboard-card-value" style="font-size:1.3rem;">
                                @growthDisplay <span style="font-size:1rem;color:#22c55e;">this month</span>
                            </div>
                        </div>
                    </div>
                    <div class="dashboard-sparkline">
                        <svg width="100" height="100" viewBox="0 0 100 32">
                            <polyline fill="none" stroke="#3766ff" stroke-width="3"
                                      points="0,28 15,22 30,25 45,15 60,18 75,10 90,14 100,8"
                                      style="filter: drop-shadow(0 1px 3px #3766ff33);"/>
                        </svg>
                    </div>
                </div>
            </div>

            <!-- Chart & Quick Actions & Profile -->
            <div class="dashboard-side">
                <div class="dashboard-chart-card">
                    <div class="dashboard-chart-header">
                        <span>Appointments Trend</span>
                        <span class="dashboard-chart-period">Last 7 days</span>
                    </div>
                    <div class="dashboard-chart-placeholder" style="flex-direction:column;align-items:flex-start;">

                        <svg width="100%" height="200" viewBox="0 0 250 30">
                            <!-- Y Axis -->
                            <line x1="30" y1="-25" x2="30" y2="55" stroke="#bbb" stroke-width="0.5"/>
                            <!-- X Axis -->
                            <line x1="30" y1="55" x2="240" y2="55" stroke="#bbb" stroke-width="0.5"/>
                            <!-- Y Axis Label (at the top) -->
                            <text x="30" y="-29" font-size="7" fill="#333" text-anchor="middle" font-weight="bold">
                                Appointments
                            </text>
                            <!-- X Axis Label (at the end of the axis) -->
                            <text x="240" y="65" font-size="10" fill="#333" text-anchor="middle" font-weight="bold">
                                Day
                            </text>
                            <!-- Milestone markers at axes -->
                            @* <rect x="27" y="18" width="6" height="2" fill="#2563eb" stroke="#fff" stroke-width="1"/> *@
                            <rect x="215" y="50" width="2" height="6" fill="#2563eb" stroke="#fff" stroke-width="1"/>
                            <text x="215" y="45" font-size="4" fill="#333" text-anchor="middle" font-weight="bold">
                                Today
                            </text>
                            <!-- Y Axis Labels (0 and max) -->
                            <text x="15" y="58" font-size="10" fill="#888">0</text>
                            @* <text x="15" y="22" font-size="10" fill="#888">5</text>
                            <text x="15" y="-18" font-size="10" fill="#888">10</text> *@
                            @if (appointmentsPerDay.Count == 7)
                            {
                                
                                var max = appointmentsPerDay.Max();
                                var maxIndex = appointmentsPerDay.IndexOf(max);
                                int xSteps = 31;
                                int xStarts = -140;
                                var pxs = xStarts + maxIndex * xSteps;
                                var pys = 55 - (max == 0 ? 0 : (max * 45 / (max == 0 ? 1 : max)));
                                @* <g><text x="15" y="@(pys - 2)" font-size="12" fill="#2563eb" text-anchor="middle" font-weight="bold">@max</text></g> *@
                                
                                // X Axis Day Labels
                                var days = Enumerable.Range(0, 7)
                                    .Select(offset => DateTime.UtcNow.Date.AddDays(-6 + offset).ToString("ddd")).ToList();
                                int xStep = 31;
                                int xStart = 30;
                                int yBase = 65;

                                for (int i = 0; i < days.Count; i++)
                                {
                                   <g><text x="@(xStart + i * xStep)" y="@yBase" font-size="7" fill="#888" text-anchor="middle">@days[i]</text></g> 
                                }
                                // Polyline points
                                var points = string.Join(" ",
                                    appointmentsPerDay.Select((v, idx) =>
                                        $"{xStart + idx * xStep},{55 - (max == 0 ? 0 : (v * 45 / (max == 0 ? 1 : max)))}"
                                    )
                                );
                                <polyline fill="none"
                                          stroke="#3766ff"
                                          stroke-width="4"
                                          points="@points"
                                          style="filter: drop-shadow(0 2px 6px #3766ff33);"/>
                                // Dots and value labels for each point
                                for (int j = 0; j < appointmentsPerDay.Count; j++)
                                {
                                    var px = xStart + j * xStep;
                                    var py = 55 - (max == 0 ? 0 : (appointmentsPerDay[j] * 45 / (max == 0 ? 1 : max)));
                                    <circle cx="@px" cy="@py" r="3" fill="#2563eb"/>
                                    <g><text x="@px" y="@(py - 5)" font-size="6" fill="#000" text-anchor="middle">@appointmentsPerDay[j]</text></g>

                                }
                                
                            }
                        </svg>
                        <div class="dashboard-appointment-stats">
                            <span class="stat-label">Total: <b>@totalAppointments7d</b></span>,
                            <span class="stat-label stat-green">Finished: <b>@finishedAppointments7d</b></span>,
                            <span class="stat-label stat-blue">Pending: <b>@pendingAppointments7d</b></span>,
                            <span class="stat-label stat-red">Cancelled: <b>@declinedAppointments7d</b></span>.
                        </div>
                    </div>
                </div>
                @* <div class="dashboard-quick-actions">
                    <a href="/Management/User?showCreate=true" class="dashboard-action-btn bg-blue">
                        <i class="fas fa-user-plus"></i> Add User
                    </a>
                    <a href="/Management/Appointment" class="dashboard-action-btn bg-green">
                        <i class="fas fa-calendar-plus"></i> New Appointment
                    </a>
                    <a href="/Management/Campaign" class="dashboard-action-btn bg-yellow">
                        <i class="fas fa-bullhorn"></i> New Campaign
                    </a>
                    <a href="/Management/CourseEnroll" class="dashboard-action-btn bg-purple">
                        <i class="fas fa-book"></i> New Course
                    </a>
                    <a href="/Management/Blog" class="dashboard-action-btn bg-red">
                        <i class="fas fa-blog"></i> New Blog
                    </a>
                </div> *@
                <div class="dashboard-shortcuts">
                    <h3>Quick Links</h3>
                    <ul>
                        <li><a href="/Management/User"><i class="fas fa-users-cog"></i> Manage Users</a></li>
                        <li><a href="/Management/Appointment"><i class="fas fa-calendar-alt"></i> Manage
                                Appointments</a></li>
                        <li><a href="/Management/CourseEnroll"><i class="fas fa-user-graduate"></i> Manage
                                Enrollments</a></li>
                        <li><a href="/Management/Campaign"><i class="fas fa-bullhorn"></i> Manage Campaigns</a></li>
                        <li><a href="/Management/Blog"><i class="fas fa-blog"></i> Manage Blog</a></li>
                        <li><a href="/Management/Course"><i class="fas fa-book-open"></i> Manage Course</a></li>
                    </ul>
                </div>
                <!-- Profile Quick Card -->
                <div class="dashboard-profile-card">
                    <div class="profile-avatar">
                        @if (!string.IsNullOrEmpty(currentUser?.ImageUrl))
                        {
                            @* <img src="@currentUser.ImageUrl" alt="Profile Picture" style="width:48px;height:48px;border-radius:50%;" /> *@
                        }
                        else
                        {
                            <i class="fas fa-user-circle"></i>
                        }
                    </div>
                    <div>
                        <div class="profile-name">@currentUser?.Username</div>
                    </div>
                    <div class="profile-expand-container @(isProfileExpanded ? "expanded" : "")">
                        <button class="dashboard-action-btn bg-blue profile-expand-btn"
                                @onclick="() => isProfileExpanded = !isProfileExpanded">
                            <i class="fas fa-cog"></i> Profile
                        </button>
                        @if (isProfileExpanded && currentUser != null)
                        {
                            <div class="profile-expanded-content">
                                <p><b>Email:</b> @currentUser.Email</p>
                                <p>
                                    <b>Phone:</b> @(string.IsNullOrEmpty(currentUser.PhoneNumber) ? "N/A" : currentUser.PhoneNumber)
                                </p>
                                <p><b>Date of Birth:</b> @(currentUser.DoB?.ToString() ?? "N/A")</p>vl
                                <p><b>Account Created:</b> @currentUser.CreatedDate.ToString("yyyy-MM-dd")</p>
                                <p><b>Role:</b> @currentUser.Role?.RoleName</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Activity & Notifications & System Health & Usage -->
        <div class="dashboard-bottom-grid">
            <div class="dashboard-section">
                <h2>Recent Activity</h2>
                <ul class="dashboard-activity">
                    <li><span class="activity-dot bg-blue"></span> New user registered</li>
                    <li><span class="activity-dot bg-green"></span> Appointment confirmed</li>
                    <li><span class="activity-dot bg-yellow"></span> Campaign launched</li>
                    <li><span class="activity-dot bg-purple"></span> Notification sent</li>
                </ul>
            </div>
            @* <div class="dashboard-section dashboard-notifications">
        <h2>Notifications</h2>
        <ul class="dashboard-activity">
            <li><span class="activity-dot bg-purple"></span> System update scheduled</li>
            <li><span class="activity-dot bg-blue"></span> New feedback received</li>
        </ul>
    </div> *@
            @* <div class="dashboard-section dashboard-system-health">
        <h2>System Health</h2>
        <ul class="dashboard-activity">
            <li><span class="activity-dot bg-green"></span> API: <span class="status-label status-ok">Online</span></li>
            <li><span class="activity-dot bg-green"></span> Database: <span class="status-label status-ok">Connected</span></li>
            <li><span class="activity-dot bg-green"></span> Auth: <span class="status-label status-ok">Operational</span></li>
        </ul>
        <!-- System Usage Progress Bar -->
        <div class="system-usage-bar">
            <div class="system-usage-label">System Usage</div>
            <div class="system-usage-track">
                <div class="system-usage-fill" style="width: 72%;"></div>
            </div>
            <div class="system-usage-percent">@((systemUsagePercent > 100 ? 100 : systemUsagePercent))%</div>
        </div>
    </div> *@
            <div class="dashboard-section dashboard-top-course">
                <h2>Top Performing Course</h2>
                @if (topCourse != null)
                {
                    <div class="top-course-info">
                        <div class="top-course-title">
                            <i class="fas fa-book-open"></i> "@topCourse.CourseName"
                        </div>
                        <div class="top-course-meta">
                            Enrollments: <span class="top-course-enroll">@topCourseEnrollments</span> |
                            Completion Rate: <span
                                class="top-course-complete">@($"{topCourseCompletionRate:F0}%")</span>
                        </div>
                    </div>
                }
                else
                {
                    <div>No course enrollments yet.</div>
                }
            </div>
            @* <div class="dashboard-section dashboard-messages"> *@
            @*     <h2>Recent Messages</h2> *@
            @*     <ul class="dashboard-activity"> *@
            @*         <li><span class="activity-dot bg-blue"></span> "Great course content!" - Jane D.</li> *@
            @*         <li><span class="activity-dot bg-green"></span> "Appointment system is smooth." - Mark P.</li> *@
            @*         <li><span class="activity-dot bg-yellow"></span> "Would love more campaigns." - Alex T.</li> *@
            @*     </ul> *@
            @* </div> *@
        </div>

        <div class="dashboard-section dashboard-tips">
            <h2>Note</h2>
            <textarea class="reminder-textarea" @bind="reminderText" placeholder="Write your reminder here..." rows="5"></textarea>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="access-denied">
            <h2>Access Denied</h2>
            <p>
                You do not have permission to access this page. Please <a href="/login">log in</a> with an authorized
                account.
            </p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool isProfileExpanded = false;
    private string? userName;
    private int totalAppointments7d;
    private int completedAppointments7d;
    private int scheduledAppointments7d;
    private int cancelledAppointments7d;
    private int pendingAppointments7d;
    private int finishedAppointments7d;
    private int declinedAppointments7d;
    private int totalCourseEnrollments;
    private int totalAllAppointments;
    private int totalCampaigns;
    private int totalCourses;
    private int totalBlogs;
    private int totalUsers;
    private bool showCreateForm = false;
    private string reminderText { get; set; } = string.Empty;
    private List<int> appointmentsPerDay = new();
    private string growthDisplay = "Loading";
    private CourseDTO? topCourse;
    private UserDTO? currentUser;
    private int topCourseEnrollments = 0;
    private double topCourseCompletionRate = 0.0;
    // private int maxUsers = 1000; Set your system's user capacity here
    // private int systemUsagePercent => maxUsers > 0
    //     ? (int)Math.Round((totalUsers / (double)maxUsers) * 100)
    //     : 0;

    private class DashboardCard
    {
        public string BootstrapIcon { get; set; } = ""; // e.g. "bi-people-fill"
        public string IconBg { get; set; } = "";
        public string Title { get; set; } = "";
        public string Value { get; set; } = "";
    }

    private List<DashboardCard> dashboardCards = new()
    {
        new DashboardCard { BootstrapIcon = "bi-people-fill", IconBg = "bg-blue", Title = "Users", Value = "Loading..." },
        new DashboardCard { BootstrapIcon = "bi-calendar-check-fill", IconBg = "bg-green", Title = "Appointments", Value = "Loading..." },
        new DashboardCard { BootstrapIcon = "bi-megaphone-fill", IconBg = "bg-yellow", Title = "Campaigns", Value = "Loading..." },
        new DashboardCard { BootstrapIcon = "bi-journal-bookmark-fill", IconBg = "bg-purple", Title = "Courses", Value = "Loading..." },
        new DashboardCard { BootstrapIcon = "bi-mortarboard-fill", IconBg = "bg-orange", Title = "Enrollments", Value = "Loading..." },
        new DashboardCard { BootstrapIcon = "bi-journal-richtext", IconBg = "bg-red", Title = "Blogs", Value = "Loading..." }

    };

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userName = user.Identity is not null && user.Identity.IsAuthenticated
            ? user.Identity.Name
            : "Guest";

        // Fetch all users and count
        var allUsers = await UserApiService.GetAllAsync();
        totalUsers = allUsers.Count;

        // Find the current user details
        currentUser = allUsers.FirstOrDefault(u => u.Username == userName);

        // Update the Users card value
        var usersCard = dashboardCards.FirstOrDefault(c => c.Title == "Users");
        if (usersCard != null)
        {
            usersCard.Value = totalUsers.ToString();
        }
        // Fetch total blog count
        totalBlogs = await BlogApiService.GetCountAsync();
        var blogsCard = dashboardCards.FirstOrDefault(c => c.Title == "Blogs");
        if (blogsCard != null)
        {
            blogsCard.Value = totalBlogs.ToString();
        }
        // Efficient course count
        totalCourses = await CourseApiService.GetCountAsync();
        var coursesCard = dashboardCards.FirstOrDefault(c => c.Title == "Courses");
        if (coursesCard != null)
        {
            coursesCard.Value = totalCourses.ToString();
        }

        // Fetch course enrollment count
        totalCourseEnrollments = await CourseEnrollApiService.GetCountAsync();
        var enrollCard = dashboardCards.FirstOrDefault(c => c.Title == "Enrollments" || c.Title == "Course Enrollments");
        if (enrollCard != null)
        {
            enrollCard.Value = totalCourseEnrollments.ToString();
        }

        // Fetch all appointments
        var allAppointments = await AppointmentApiService.GetAllAsync();
        totalAllAppointments = allAppointments.Count;
        totalCampaigns = await CampaignApiService.GetCountAsync();

        // Update the Campaigns card value
        var campaignCard = dashboardCards.FirstOrDefault(c => c.Title == "Campaigns");
        if (campaignCard != null)
        {
            campaignCard.Value = totalCampaigns.ToString();
        }
        // Filter for last 7 days
        var fromDate = DateTime.UtcNow.Date.AddDays(-6);
        var toDate = DateTime.UtcNow.Date.AddDays(1);
        var last7d = allAppointments
            .Where(a => a.AppointmentDate >= fromDate && a.AppointmentDate < toDate)
            .ToList();

        totalAppointments7d = last7d.Count;
        completedAppointments7d = last7d.Count(a => a.Status.Equals("Completed", StringComparison.OrdinalIgnoreCase));
        scheduledAppointments7d = last7d.Count(a => a.Status.Equals("Scheduled", StringComparison.OrdinalIgnoreCase));
        cancelledAppointments7d = last7d.Count(a => a.Status.Equals("Cancelled", StringComparison.OrdinalIgnoreCase));
        pendingAppointments7d = last7d.Count(a => a.Status.Equals("Pending", StringComparison.OrdinalIgnoreCase));
        finishedAppointments7d = last7d.Count(a => a.Status.Equals("Finished", StringComparison.OrdinalIgnoreCase));
        declinedAppointments7d = last7d.Count(a => a.Status.Equals("Declined", StringComparison.OrdinalIgnoreCase));

        // Appointments per day for sparkline
        appointmentsPerDay = Enumerable.Range(0, 7)
            .Select(offset =>
            {
                var day = fromDate.AddDays(offset);
                return last7d.Count(a => a.AppointmentDate.Date == day.Date);
            })
            .ToList();

        // Update the Appointments card value
        var appointmentCard = dashboardCards.FirstOrDefault(c => c.Title == "Appointments");
        if (appointmentCard != null)
        {
            appointmentCard.Value = totalAllAppointments.ToString();
        }
        // Get the first day of this month and last month
        var now = DateTime.UtcNow;
        var thisMonth = new DateTime(now.Year, now.Month, 1);
        var lastMonth = thisMonth.AddMonths(-1);

        // Count users registered in each month
        int usersThisMonth = allUsers.Count(u => u.CreatedDate >= thisMonth);
        int usersLastMonth = allUsers.Count(u => u.CreatedDate >= lastMonth && u.CreatedDate < thisMonth);


        // Calculate growth percentage
        double growthPercent = usersLastMonth == 0
            ? (usersThisMonth > 0 ? 100 : 0)
            : ((usersThisMonth - usersLastMonth) / (double)usersLastMonth) * 100;

        // Format for display
        growthDisplay = $"{(growthPercent >= 0 ? "+" : "")}{growthPercent:F1}%";

        // Fetch all courses and enrollments--------------------------------------------
        var allCourses = await CourseApiService.GetAllAsync();
        var allEnrollments = await CourseEnrollApiService.GetAllAsync();

        // Group enrollments by CourseId and find the course with the most enrollments
        var top = allEnrollments
            .GroupBy(e => e.CourseId)
            .OrderByDescending(g => g.Count())
            .FirstOrDefault();

        if (top != null)
        {
            topCourse = allCourses.FirstOrDefault(c => c.CourseId == top.Key);
            topCourseEnrollments = top.Count();
            int completed = top.Count(e => e.Status == "Completed");
            topCourseCompletionRate = topCourseEnrollments > 0 ? (completed * 100.0 / topCourseEnrollments) : 0.0;
        }
        //Navigate to create form
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("showCreate", out var value) && value == "true")
        {
            showCreateForm = true;
        }

    }

    private async Task ExportDashboardReport()
    {
        // Helper for quoting values with commas/hyphens
        string Quote(string value)
        {
            if (value.StartsWith("-"))
                value = "\t" + value;
            return value.Contains(",") ? $"\"{value}\"" : value;
        }

        // Get breakdown by role
        var allUsers = await UserApiService.GetAllAsync();
        int adminCount = allUsers.Count(u => u.RoleId == "AD");
        int staffCount = allUsers.Count(u => u.RoleId == "ST");
        int consultantCount = allUsers.Count(u => u.RoleId == "CS" || u.RoleId == "CO");
        int memberCount = allUsers.Count(u => u.RoleId == "MB");

        // Get campaign status breakdown
        var allCampaigns = await CampaignApiService.GetAllAsync();
        int activeCampaigns = allCampaigns.Count(c => c.Status == "Active");
        int completedCampaigns = allCampaigns.Count(c => c.Status == "Completed");

        // Get top 3 courses by enrollments
        var allCourses = await CourseApiService.GetAllAsync();
        var allEnrollments = await CourseEnrollApiService.GetAllAsync();
        var topCourses = allEnrollments
            .GroupBy(e => e.CourseId)
            .OrderByDescending(g => g.Count())
            .Take(3)
            .Select(g => new
            {
                Course = allCourses.FirstOrDefault(c => c.CourseId == g.Key),
                Enrollments = g.Count(),
                CompletionRate = g.Count() > 0 ? (g.Count(e => e.Status == "Completed") * 100.0 / g.Count()) : 0.0
            })
            .ToList();

        // Fix: Remove trailing commas in section headers, use clear labels, and ensure all values are quoted
        var lines = new List<string>
        {
            "User Metrics",
            $"Total Users,{Quote(totalUsers.ToString())}",
            $"Admins,{Quote(adminCount.ToString())}",
            $"Staff,{Quote(staffCount.ToString())}",
            $"Consultants,{Quote(consultantCount.ToString())}",
            $"Members,{Quote(memberCount.ToString())}",
            $"User Growth This Month,{Quote(growthDisplay)}",
            "",
            "Course Metrics",
            $"Total Courses,{Quote(totalCourses.ToString())}",
            $"Total Enrollments,{Quote(totalCourseEnrollments.ToString())}",
            $"Top Course,{Quote(topCourse?.CourseName ?? "N/A")}",
            $"Top Course Enrollments,{Quote(topCourseEnrollments.ToString())}",
            $"Top Course Completion Rate,{Quote($"{topCourseCompletionRate:F1}%")}",
        };

        for (int i = 0; i < topCourses.Count; i++)
        {
            var tc = topCourses[i];
            lines.Add($"Top {i + 1} Course,{Quote(tc.Course?.CourseName ?? "N/A")}");
            lines.Add($"Top {i + 1} Enrollments,{Quote(tc.Enrollments.ToString())}");
            lines.Add($"Top {i + 1} Completion Rate,{Quote($"{tc.CompletionRate:F1}%")}");
        }

        lines.AddRange(new[]
        {
            "",
            "Appointment Metrics",
            $"Total Appointments,{Quote(totalAllAppointments.ToString())}",
            $"Appointments (Last 7 Days),{Quote(totalAppointments7d.ToString())}",
            $"Completed,{Quote(completedAppointments7d.ToString())}",
            $"Scheduled,{Quote(scheduledAppointments7d.ToString())}",
            $"Pending,{Quote(pendingAppointments7d.ToString())}",
            $"Finished,{Quote(finishedAppointments7d.ToString())}",
            $"Cancelled,{Quote(cancelledAppointments7d.ToString())}",
            $"Declined,{Quote(declinedAppointments7d.ToString())}",
            "",
            "Campaign Metrics",
            $"Total Campaigns,{Quote(totalCampaigns.ToString())}",
            $"Active Campaigns,{Quote(activeCampaigns.ToString())}",
            $"Completed Campaigns,{Quote(completedCampaigns.ToString())}",
            "",
            "Other Metrics",
            $"Total Blogs,{Quote(totalBlogs.ToString())}"
        });

        var csv = string.Join("\r\n", lines);
        await JS.InvokeVoidAsync("downloadCsvFile", "dashboard-report.csv", csv);
    }
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         Pass a .NET object reference for callback
    //         await JS.InvokeVoidAsync("dashboardDnD.init", DotNetObjectReference.Create(this));
    //     }
    // }

    // [JSInvokable]
    // public void UpdateCardOrder(int[] newOrder)
    // {
    //     Reorder dashboardCards based on newOrder array
    //     var reordered = new List<DashboardCard>();
    //     foreach (var idx in newOrder)
    //     {
    //         reordered.Add(dashboardCards[idx]);
    //     }
    //     dashboardCards = reordered;
    //     StateHasChanged();
    // }
}